/* tslint:disable */
/* eslint-disable */
/**
 * Maive API
 * API for Maive application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Schema for authentication responses.
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * Whether the operation was successful
     * @type {boolean}
     * @memberof AuthResponse
     */
    'success': boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuthResponse
     */
    'session'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'error'?: string | null;
    /**
     * Whether MFA is required
     * @type {boolean}
     * @memberof AuthResponse
     */
    'requires_mfa'?: boolean;
    /**
     * Whether MFA setup is required
     * @type {boolean}
     * @memberof AuthResponse
     */
    'mfa_setup_required'?: boolean;
}
/**
 * Available CRM providers.
 * @export
 * @enum {string}
 */

export const CRMProvider = {
    ServiceTitan: 'service_titan'
} as const;

export type CRMProvider = typeof CRMProvider[keyof typeof CRMProvider];


/**
 * Request model for creating an outbound call.
 * @export
 * @interface CallRequest
 */
export interface CallRequest {
    /**
     * Phone number to call
     * @type {string}
     * @memberof CallRequest
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'customer_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'customer_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'customer_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'claim_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'date_of_loss'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'insurance_agency'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'adjuster_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'adjuster_phone'?: string | null;
    /**
     * Additional metadata
     * @type {{ [key: string]: any; }}
     * @memberof CallRequest
     */
    'metadata'?: { [key: string]: any; };
}
/**
 * Response model for call information.
 * @export
 * @interface CallResponse
 */
export interface CallResponse {
    /**
     * Unique call identifier
     * @type {string}
     * @memberof CallResponse
     */
    'call_id': string;
    /**
     * Current call status
     * @type {CallStatus}
     * @memberof CallResponse
     */
    'status': CallStatus;
    /**
     * Voice AI provider
     * @type {VoiceAIProvider}
     * @memberof CallResponse
     */
    'provider': VoiceAIProvider;
    /**
     * 
     * @type {string}
     * @memberof CallResponse
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CallResponse
     */
    'provider_data'?: { [key: string]: any; } | null;
}


/**
 * Call status values across Voice AI systems.
 * @export
 * @enum {string}
 */

export const CallStatus = {
    Queued: 'queued',
    Ringing: 'ringing',
    InProgress: 'in_progress',
    Forwarding: 'forwarding',
    Ended: 'ended',
    Busy: 'busy',
    NoAnswer: 'no_answer',
    Failed: 'failed',
    Canceled: 'canceled'
} as const;

export type CallStatus = typeof CallStatus[keyof typeof CallStatus];


/**
 * Response model for estimate item information.
 * @export
 * @interface EstimateItemResponse
 */
export interface EstimateItemResponse {
    /**
     * ID of the estimate item
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'id': number;
    /**
     * SKU details
     * @type {SkuModel}
     * @memberof EstimateItemResponse
     */
    'sku': SkuModel;
    /**
     * SKU account
     * @type {string}
     * @memberof EstimateItemResponse
     */
    'skuAccount': string;
    /**
     * Item description
     * @type {string}
     * @memberof EstimateItemResponse
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'membershipTypeId'?: number | null;
    /**
     * Quantity
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'qty': number;
    /**
     * Unit rate
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'unitRate': number;
    /**
     * Total amount
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'total': number;
    /**
     * Unit cost
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'unitCost': number;
    /**
     * Total cost
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'totalCost': number;
    /**
     * 
     * @type {string}
     * @memberof EstimateItemResponse
     */
    'itemGroupName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'itemGroupRootId'?: number | null;
    /**
     * Date/time (in UTC) when the item was created
     * @type {string}
     * @memberof EstimateItemResponse
     */
    'createdOn': string;
    /**
     * Date/time (in UTC) when the item was last modified
     * @type {string}
     * @memberof EstimateItemResponse
     */
    'modifiedOn': string;
    /**
     * 
     * @type {boolean}
     * @memberof EstimateItemResponse
     */
    'chargeable'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'invoiceItemId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EstimateItemResponse
     */
    'budgetCodeId'?: number | null;
}
/**
 * Response model for estimate items list.
 * @export
 * @interface EstimateItemsResponse
 */
export interface EstimateItemsResponse {
    /**
     * List of estimate items
     * @type {Array<EstimateItemResponse>}
     * @memberof EstimateItemsResponse
     */
    'items': Array<EstimateItemResponse>;
    /**
     * 
     * @type {number}
     * @memberof EstimateItemsResponse
     */
    'total_count'?: number | null;
    /**
     * Current page number
     * @type {number}
     * @memberof EstimateItemsResponse
     */
    'page': number;
    /**
     * Page size
     * @type {number}
     * @memberof EstimateItemsResponse
     */
    'page_size': number;
    /**
     * Whether there are more items
     * @type {boolean}
     * @memberof EstimateItemsResponse
     */
    'has_more': boolean;
}
/**
 * Response model for Service Titan estimate information.
 * @export
 * @interface EstimateResponse
 */
export interface EstimateResponse {
    /**
     * ID of the estimate
     * @type {number}
     * @memberof EstimateResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof EstimateResponse
     */
    'jobId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EstimateResponse
     */
    'projectId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EstimateResponse
     */
    'locationId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EstimateResponse
     */
    'customerId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EstimateResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EstimateResponse
     */
    'jobNumber'?: string | null;
    /**
     * 
     * @type {EstimateStatus}
     * @memberof EstimateResponse
     */
    'status'?: EstimateStatus | null;
    /**
     * Review status of the estimate
     * @type {EstimateReviewStatus}
     * @memberof EstimateResponse
     */
    'reviewStatus': EstimateReviewStatus;
    /**
     * 
     * @type {string}
     * @memberof EstimateResponse
     */
    'summary'?: string | null;
    /**
     * Date/time (in UTC) when the estimate was created
     * @type {string}
     * @memberof EstimateResponse
     */
    'createdOn': string;
    /**
     * Date/time (in UTC) when estimate was last modified
     * @type {string}
     * @memberof EstimateResponse
     */
    'modifiedOn': string;
    /**
     * 
     * @type {string}
     * @memberof EstimateResponse
     */
    'soldOn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EstimateResponse
     */
    'soldBy'?: number | null;
    /**
     * Whether the estimate is active
     * @type {boolean}
     * @memberof EstimateResponse
     */
    'active': boolean;
    /**
     * Subtotal amount
     * @type {number}
     * @memberof EstimateResponse
     */
    'subtotal': number;
    /**
     * Tax amount
     * @type {number}
     * @memberof EstimateResponse
     */
    'tax': number;
    /**
     * 
     * @type {number}
     * @memberof EstimateResponse
     */
    'businessUnitId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EstimateResponse
     */
    'businessUnitName'?: string | null;
    /**
     * Whether this estimate is recommended
     * @type {boolean}
     * @memberof EstimateResponse
     */
    'isRecommended': boolean;
    /**
     * 
     * @type {number}
     * @memberof EstimateResponse
     */
    'budgetCodeId'?: number | null;
    /**
     * Whether this estimate is a change order
     * @type {boolean}
     * @memberof EstimateResponse
     */
    'isChangeOrder': boolean;
}


/**
 * Estimate review status values.
 * @export
 * @enum {string}
 */

export const EstimateReviewStatus = {
    None: 'None',
    NeedsApproval: 'NeedsApproval',
    Approved: 'Approved',
    NotApproved: 'NotApproved'
} as const;

export type EstimateReviewStatus = typeof EstimateReviewStatus[keyof typeof EstimateReviewStatus];


/**
 * Estimate status model with value and name.
 * @export
 * @interface EstimateStatus
 */
export interface EstimateStatus {
    /**
     * Status value
     * @type {number}
     * @memberof EstimateStatus
     */
    'value': number;
    /**
     * Status name
     * @type {string}
     * @memberof EstimateStatus
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Response model for job note.
 * @export
 * @interface JobNoteResponse
 */
export interface JobNoteResponse {
    /**
     * Text content of the note
     * @type {string}
     * @memberof JobNoteResponse
     */
    'text': string;
    /**
     * Whether the note is pinned to the top
     * @type {boolean}
     * @memberof JobNoteResponse
     */
    'isPinned': boolean;
    /**
     * ID of user who created this note
     * @type {number}
     * @memberof JobNoteResponse
     */
    'createdById': number;
    /**
     * Date/time (in UTC) the note was created
     * @type {string}
     * @memberof JobNoteResponse
     */
    'createdOn': string;
    /**
     * Date/time (in UTC) the note was modified
     * @type {string}
     * @memberof JobNoteResponse
     */
    'modifiedOn': string;
}
/**
 * Response model for Service Titan job information.
 * @export
 * @interface JobResponse
 */
export interface JobResponse {
    /**
     * ID of the job
     * @type {number}
     * @memberof JobResponse
     */
    'id': number;
    /**
     * Job number
     * @type {string}
     * @memberof JobResponse
     */
    'jobNumber': string;
    /**
     * 
     * @type {number}
     * @memberof JobResponse
     */
    'projectId'?: number | null;
    /**
     * ID of the job\'s customer
     * @type {number}
     * @memberof JobResponse
     */
    'customerId': number;
    /**
     * ID of the job\'s location
     * @type {number}
     * @memberof JobResponse
     */
    'locationId': number;
    /**
     * Status of the job
     * @type {string}
     * @memberof JobResponse
     */
    'jobStatus': string;
    /**
     * 
     * @type {string}
     * @memberof JobResponse
     */
    'completedOn'?: string | null;
    /**
     * ID of the job\'s business unit
     * @type {number}
     * @memberof JobResponse
     */
    'businessUnitId': number;
    /**
     * ID of job type
     * @type {number}
     * @memberof JobResponse
     */
    'jobTypeId': number;
    /**
     * Priority of the job
     * @type {string}
     * @memberof JobResponse
     */
    'priority': string;
    /**
     * ID of the job\'s campaign
     * @type {number}
     * @memberof JobResponse
     */
    'campaignId': number;
    /**
     * Number of appointments on the job
     * @type {number}
     * @memberof JobResponse
     */
    'appointmentCount': number;
    /**
     * ID of the first appointment on the job
     * @type {number}
     * @memberof JobResponse
     */
    'firstAppointmentId': number;
    /**
     * ID of the last appointment on the job
     * @type {number}
     * @memberof JobResponse
     */
    'lastAppointmentId': number;
    /**
     * 
     * @type {number}
     * @memberof JobResponse
     */
    'recallForId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof JobResponse
     */
    'warrantyId'?: number | null;
    /**
     * Whether the job is a no-charge job
     * @type {boolean}
     * @memberof JobResponse
     */
    'noCharge': boolean;
    /**
     * Whether notifications will be sent to customers
     * @type {boolean}
     * @memberof JobResponse
     */
    'notificationsEnabled': boolean;
    /**
     * Date/time (in UTC) when the job was created
     * @type {string}
     * @memberof JobResponse
     */
    'createdOn': string;
    /**
     * ID of the user who created the job
     * @type {number}
     * @memberof JobResponse
     */
    'createdById': number;
    /**
     * Date/time (in UTC) when job was last modified
     * @type {string}
     * @memberof JobResponse
     */
    'modifiedOn': string;
    /**
     * Tags on the job
     * @type {Array<number>}
     * @memberof JobResponse
     */
    'tagTypeIds': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof JobResponse
     */
    'customerPo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof JobResponse
     */
    'invoiceId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof JobResponse
     */
    'total'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobResponse
     */
    'summary'?: string | null;
}
/**
 * Project status values across CRM systems.
 * @export
 * @enum {string}
 */

export const ProjectStatus = {
    Hold: 'hold',
    Dispatched: 'dispatched',
    Done: 'done',
    Cancelled: 'cancelled',
    Scheduled: 'scheduled',
    Working: 'working'
} as const;

export type ProjectStatus = typeof ProjectStatus[keyof typeof ProjectStatus];


/**
 * Response model for multiple project statuses.
 * @export
 * @interface ProjectStatusListResponse
 */
export interface ProjectStatusListResponse {
    /**
     * List of project statuses
     * @type {Array<ProjectStatusResponse>}
     * @memberof ProjectStatusListResponse
     */
    'projects': Array<ProjectStatusResponse>;
    /**
     * Total number of projects
     * @type {number}
     * @memberof ProjectStatusListResponse
     */
    'total_count': number;
    /**
     * CRM provider
     * @type {CRMProvider}
     * @memberof ProjectStatusListResponse
     */
    'provider': CRMProvider;
}


/**
 * Response model for project status information.
 * @export
 * @interface ProjectStatusResponse
 */
export interface ProjectStatusResponse {
    /**
     * Unique project identifier
     * @type {string}
     * @memberof ProjectStatusResponse
     */
    'project_id': string;
    /**
     * Current project status
     * @type {ProjectStatus}
     * @memberof ProjectStatusResponse
     */
    'status': ProjectStatus;
    /**
     * CRM provider
     * @type {CRMProvider}
     * @memberof ProjectStatusResponse
     */
    'provider': CRMProvider;
    /**
     * 
     * @type {string}
     * @memberof ProjectStatusResponse
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ProjectStatusResponse
     */
    'provider_data'?: { [key: string]: any; } | null;
}


/**
 * User roles in the system.
 * @export
 * @enum {string}
 */

export const Role = {
    Admin: 'admin',
    Manager: 'manager',
    User: 'user'
} as const;

export type Role = typeof Role[keyof typeof Role];


/**
 * SKU model for estimate items.
 * @export
 * @interface SkuModel
 */
export interface SkuModel {
    /**
     * SKU ID
     * @type {number}
     * @memberof SkuModel
     */
    'id': number;
    /**
     * SKU name
     * @type {string}
     * @memberof SkuModel
     */
    'name': string;
    /**
     * Display name
     * @type {string}
     * @memberof SkuModel
     */
    'displayName': string;
    /**
     * SKU type
     * @type {string}
     * @memberof SkuModel
     */
    'type': string;
    /**
     * Sold hours
     * @type {number}
     * @memberof SkuModel
     */
    'soldHours': number;
    /**
     * General ledger account ID
     * @type {number}
     * @memberof SkuModel
     */
    'generalLedgerAccountId': number;
    /**
     * General ledger account name
     * @type {string}
     * @memberof SkuModel
     */
    'generalLedgerAccountName': string;
    /**
     * Date/time (in UTC) when SKU was last modified
     * @type {string}
     * @memberof SkuModel
     */
    'modifiedOn': string;
}
/**
 * User information.
 * @export
 * @interface User
 */
export interface User {
    /**
     * User\'s unique identifier
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * User\'s email address
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof User
     */
    'role'?: Role | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'organization_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'profile_picture'?: string | null;
    /**
     * Whether user\'s email is verified
     * @type {boolean}
     * @memberof User
     */
    'email_verified'?: boolean;
    /**
     * Whether MFA is enabled for the user
     * @type {boolean}
     * @memberof User
     */
    'mfa_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string | null;
}


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * Available Voice AI providers.
 * @export
 * @enum {string}
 */

export const VoiceAIProvider = {
    Vapi: 'vapi'
} as const;

export type VoiceAIProvider = typeof VoiceAIProvider[keyof typeof VoiceAIProvider];



/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiAuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallbackApiAuthCallbackGet: async (code?: string | null, error?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiAuthRefreshPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutApiAuthSignoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/signout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserInfoApiAuthMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getCurrentUserInfoApiAuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallbackApiAuthCallbackGet(code, error, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.oauthCallbackApiAuthCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshTokenApiAuthRefreshPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.refreshTokenApiAuthRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signOutApiAuthSignoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.signOutApiAuthSignoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getCurrentUserInfoApiAuthMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.oauthCallbackApiAuthCallbackGet(code, error, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.refreshTokenApiAuthRefreshPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.signOutApiAuthSignoutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Get current user information.  Returns the profile information of the currently authenticated user.
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getCurrentUserInfoApiAuthMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
     * @summary Oauth Callback
     * @param {string | null} [code] 
     * @param {string | null} [error] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).oauthCallbackApiAuthCallbackGet(code, error, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refreshTokenApiAuthRefreshPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
     * @summary Sign Out
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signOutApiAuthSignoutPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CRMApi - axios parameter creator
 * @export
 */
export const CRMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a note to a specific job.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (optional)     crm_service: The CRM service instance from dependency injection  Returns:     JobNoteResponse: The created note information  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Add Job Note
         * @param {number} tenant 
         * @param {number} jobId 
         * @param {string} text 
         * @param {boolean | null} [pinToTop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobNoteApiCrmTenantJobsJobIdNotesPost: async (tenant: number, jobId: number, text: string, pinToTop?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('addJobNoteApiCrmTenantJobsJobIdNotesPost', 'tenant', tenant)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('addJobNoteApiCrmTenantJobsJobIdNotesPost', 'jobId', jobId)
            // verify required parameter 'text' is not null or undefined
            assertParamExists('addJobNoteApiCrmTenantJobsJobIdNotesPost', 'text', text)
            const localVarPath = `/api/crm/{tenant}/jobs/{job_id}/notes`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (pinToTop !== undefined) {
                localVarQueryParameter['pin_to_top'] = pinToTop;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
         * @summary Get All Project Statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectStatusesApiCrmProjectsStatusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/projects/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific estimate by ID.  Args:     tenant: The tenant ID     estimate_id: The unique identifier for the estimate     crm_service: The CRM service instance from dependency injection  Returns:     EstimateResponse: The estimate information  Raises:     HTTPException: If the estimate is not found or an error occurs
         * @summary Get Estimate
         * @param {number} tenant 
         * @param {number} estimateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstimateApiCrmTenantEstimatesEstimateIdGet: async (tenant: number, estimateId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('getEstimateApiCrmTenantEstimatesEstimateIdGet', 'tenant', tenant)
            // verify required parameter 'estimateId' is not null or undefined
            assertParamExists('getEstimateApiCrmTenantEstimatesEstimateIdGet', 'estimateId', estimateId)
            const localVarPath = `/api/crm/{tenant}/estimates/{estimate_id}`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)))
                .replace(`{${"estimate_id"}}`, encodeURIComponent(String(estimateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get estimate items with optional filters.  Args:     tenant: The tenant ID     estimate_id: Optional estimate ID to filter items     ids: Optional comma-separated string of item IDs (max 50)     active: Optional active status filter (True, False, Any)     page: Optional page number for pagination     page_size: Optional page size for pagination (max 50)     crm_service: The CRM service instance from dependency injection  Returns:     EstimateItemsResponse: The paginated list of estimate items  Raises:     HTTPException: If an error occurs
         * @summary Get Estimate Items
         * @param {number} tenant 
         * @param {number | null} [estimateId] 
         * @param {string | null} [ids] 
         * @param {string | null} [active] 
         * @param {number | null} [page] 
         * @param {number | null} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstimateItemsApiCrmTenantEstimatesItemsGet: async (tenant: number, estimateId?: number | null, ids?: string | null, active?: string | null, page?: number | null, pageSize?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('getEstimateItemsApiCrmTenantEstimatesItemsGet', 'tenant', tenant)
            const localVarPath = `/api/crm/{tenant}/estimates/items`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (estimateId !== undefined) {
                localVarQueryParameter['estimate_id'] = estimateId;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific job by ID.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     crm_service: The CRM service instance from dependency injection  Returns:     JobResponse: The job information  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Get Job
         * @param {number} tenant 
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobApiCrmTenantJobsJobIdGet: async (tenant: number, jobId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenant' is not null or undefined
            assertParamExists('getJobApiCrmTenantJobsJobIdGet', 'tenant', tenant)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJobApiCrmTenantJobsJobIdGet', 'jobId', jobId)
            const localVarPath = `/api/crm/{tenant}/jobs/{job_id}`
                .replace(`{${"tenant"}}`, encodeURIComponent(String(tenant)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project Status
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectStatusApiCrmProjectsProjectIdStatusGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectStatusApiCrmProjectsProjectIdStatusGet', 'projectId', projectId)
            const localVarPath = `/api/crm/projects/{project_id}/status`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CRMApi - functional programming interface
 * @export
 */
export const CRMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CRMApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a note to a specific job.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (optional)     crm_service: The CRM service instance from dependency injection  Returns:     JobNoteResponse: The created note information  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Add Job Note
         * @param {number} tenant 
         * @param {number} jobId 
         * @param {string} text 
         * @param {boolean | null} [pinToTop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addJobNoteApiCrmTenantJobsJobIdNotesPost(tenant: number, jobId: number, text: string, pinToTop?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobNoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addJobNoteApiCrmTenantJobsJobIdNotesPost(tenant, jobId, text, pinToTop, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.addJobNoteApiCrmTenantJobsJobIdNotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
         * @summary Get All Project Statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectStatusesApiCrmProjectsStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectStatusListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectStatusesApiCrmProjectsStatusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getAllProjectStatusesApiCrmProjectsStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific estimate by ID.  Args:     tenant: The tenant ID     estimate_id: The unique identifier for the estimate     crm_service: The CRM service instance from dependency injection  Returns:     EstimateResponse: The estimate information  Raises:     HTTPException: If the estimate is not found or an error occurs
         * @summary Get Estimate
         * @param {number} tenant 
         * @param {number} estimateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstimateApiCrmTenantEstimatesEstimateIdGet(tenant: number, estimateId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEstimateApiCrmTenantEstimatesEstimateIdGet(tenant, estimateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getEstimateApiCrmTenantEstimatesEstimateIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get estimate items with optional filters.  Args:     tenant: The tenant ID     estimate_id: Optional estimate ID to filter items     ids: Optional comma-separated string of item IDs (max 50)     active: Optional active status filter (True, False, Any)     page: Optional page number for pagination     page_size: Optional page size for pagination (max 50)     crm_service: The CRM service instance from dependency injection  Returns:     EstimateItemsResponse: The paginated list of estimate items  Raises:     HTTPException: If an error occurs
         * @summary Get Estimate Items
         * @param {number} tenant 
         * @param {number | null} [estimateId] 
         * @param {string | null} [ids] 
         * @param {string | null} [active] 
         * @param {number | null} [page] 
         * @param {number | null} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstimateItemsApiCrmTenantEstimatesItemsGet(tenant: number, estimateId?: number | null, ids?: string | null, active?: string | null, page?: number | null, pageSize?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEstimateItemsApiCrmTenantEstimatesItemsGet(tenant, estimateId, ids, active, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getEstimateItemsApiCrmTenantEstimatesItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific job by ID.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     crm_service: The CRM service instance from dependency injection  Returns:     JobResponse: The job information  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Get Job
         * @param {number} tenant 
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobApiCrmTenantJobsJobIdGet(tenant: number, jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobApiCrmTenantJobsJobIdGet(tenant, jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getJobApiCrmTenantJobsJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project Status
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getProjectStatusApiCrmProjectsProjectIdStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CRMApi - factory interface
 * @export
 */
export const CRMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CRMApiFp(configuration)
    return {
        /**
         * Add a note to a specific job.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (optional)     crm_service: The CRM service instance from dependency injection  Returns:     JobNoteResponse: The created note information  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Add Job Note
         * @param {number} tenant 
         * @param {number} jobId 
         * @param {string} text 
         * @param {boolean | null} [pinToTop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobNoteApiCrmTenantJobsJobIdNotesPost(tenant: number, jobId: number, text: string, pinToTop?: boolean | null, options?: RawAxiosRequestConfig): AxiosPromise<JobNoteResponse> {
            return localVarFp.addJobNoteApiCrmTenantJobsJobIdNotesPost(tenant, jobId, text, pinToTop, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
         * @summary Get All Project Statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectStatusesApiCrmProjectsStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<ProjectStatusListResponse> {
            return localVarFp.getAllProjectStatusesApiCrmProjectsStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific estimate by ID.  Args:     tenant: The tenant ID     estimate_id: The unique identifier for the estimate     crm_service: The CRM service instance from dependency injection  Returns:     EstimateResponse: The estimate information  Raises:     HTTPException: If the estimate is not found or an error occurs
         * @summary Get Estimate
         * @param {number} tenant 
         * @param {number} estimateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstimateApiCrmTenantEstimatesEstimateIdGet(tenant: number, estimateId: number, options?: RawAxiosRequestConfig): AxiosPromise<EstimateResponse> {
            return localVarFp.getEstimateApiCrmTenantEstimatesEstimateIdGet(tenant, estimateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get estimate items with optional filters.  Args:     tenant: The tenant ID     estimate_id: Optional estimate ID to filter items     ids: Optional comma-separated string of item IDs (max 50)     active: Optional active status filter (True, False, Any)     page: Optional page number for pagination     page_size: Optional page size for pagination (max 50)     crm_service: The CRM service instance from dependency injection  Returns:     EstimateItemsResponse: The paginated list of estimate items  Raises:     HTTPException: If an error occurs
         * @summary Get Estimate Items
         * @param {number} tenant 
         * @param {number | null} [estimateId] 
         * @param {string | null} [ids] 
         * @param {string | null} [active] 
         * @param {number | null} [page] 
         * @param {number | null} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstimateItemsApiCrmTenantEstimatesItemsGet(tenant: number, estimateId?: number | null, ids?: string | null, active?: string | null, page?: number | null, pageSize?: number | null, options?: RawAxiosRequestConfig): AxiosPromise<EstimateItemsResponse> {
            return localVarFp.getEstimateItemsApiCrmTenantEstimatesItemsGet(tenant, estimateId, ids, active, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific job by ID.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     crm_service: The CRM service instance from dependency injection  Returns:     JobResponse: The job information  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Get Job
         * @param {number} tenant 
         * @param {number} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobApiCrmTenantJobsJobIdGet(tenant: number, jobId: number, options?: RawAxiosRequestConfig): AxiosPromise<JobResponse> {
            return localVarFp.getJobApiCrmTenantJobsJobIdGet(tenant, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project Status
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectStatusResponse> {
            return localVarFp.getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CRMApi - object-oriented interface
 * @export
 * @class CRMApi
 * @extends {BaseAPI}
 */
export class CRMApi extends BaseAPI {
    /**
     * Add a note to a specific job.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (optional)     crm_service: The CRM service instance from dependency injection  Returns:     JobNoteResponse: The created note information  Raises:     HTTPException: If the job is not found or an error occurs
     * @summary Add Job Note
     * @param {number} tenant 
     * @param {number} jobId 
     * @param {string} text 
     * @param {boolean | null} [pinToTop] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public addJobNoteApiCrmTenantJobsJobIdNotesPost(tenant: number, jobId: number, text: string, pinToTop?: boolean | null, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).addJobNoteApiCrmTenantJobsJobIdNotesPost(tenant, jobId, text, pinToTop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
     * @summary Get All Project Statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getAllProjectStatusesApiCrmProjectsStatusGet(options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getAllProjectStatusesApiCrmProjectsStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific estimate by ID.  Args:     tenant: The tenant ID     estimate_id: The unique identifier for the estimate     crm_service: The CRM service instance from dependency injection  Returns:     EstimateResponse: The estimate information  Raises:     HTTPException: If the estimate is not found or an error occurs
     * @summary Get Estimate
     * @param {number} tenant 
     * @param {number} estimateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getEstimateApiCrmTenantEstimatesEstimateIdGet(tenant: number, estimateId: number, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getEstimateApiCrmTenantEstimatesEstimateIdGet(tenant, estimateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get estimate items with optional filters.  Args:     tenant: The tenant ID     estimate_id: Optional estimate ID to filter items     ids: Optional comma-separated string of item IDs (max 50)     active: Optional active status filter (True, False, Any)     page: Optional page number for pagination     page_size: Optional page size for pagination (max 50)     crm_service: The CRM service instance from dependency injection  Returns:     EstimateItemsResponse: The paginated list of estimate items  Raises:     HTTPException: If an error occurs
     * @summary Get Estimate Items
     * @param {number} tenant 
     * @param {number | null} [estimateId] 
     * @param {string | null} [ids] 
     * @param {string | null} [active] 
     * @param {number | null} [page] 
     * @param {number | null} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getEstimateItemsApiCrmTenantEstimatesItemsGet(tenant: number, estimateId?: number | null, ids?: string | null, active?: string | null, page?: number | null, pageSize?: number | null, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getEstimateItemsApiCrmTenantEstimatesItemsGet(tenant, estimateId, ids, active, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific job by ID.  Args:     tenant: The tenant ID     job_id: The unique identifier for the job     crm_service: The CRM service instance from dependency injection  Returns:     JobResponse: The job information  Raises:     HTTPException: If the job is not found or an error occurs
     * @summary Get Job
     * @param {number} tenant 
     * @param {number} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getJobApiCrmTenantJobsJobIdGet(tenant: number, jobId: number, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getJobApiCrmTenantJobsJobIdGet(tenant, jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
     * @summary Get Project Status
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId: string, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckHealthcheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheckHealthcheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheckHealthcheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthcheckHealthcheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckHealthcheckGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthcheckHealthcheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Health check endpoint.
     * @summary Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthcheckHealthcheckGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthcheckHealthcheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Root endpoint.
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VoiceAIApi - axios parameter creator
 * @export
 */
export const VoiceAIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an outbound call.  Args:     request: The call request with phone number and context     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
         * @summary Create Outbound Call
         * @param {CallRequest} callRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundCallApiVoiceAiCallsPost: async (callRequest: CallRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callRequest' is not null or undefined
            assertParamExists('createOutboundCallApiVoiceAiCallsPost', 'callRequest', callRequest)
            const localVarPath = `/api/voice-ai/calls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
         * @summary Get Call Status
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallStatusApiVoiceAiCallsCallIdGet: async (callId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callId' is not null or undefined
            assertParamExists('getCallStatusApiVoiceAiCallsCallIdGet', 'callId', callId)
            const localVarPath = `/api/voice-ai/calls/{call_id}`
                .replace(`{${"call_id"}}`, encodeURIComponent(String(callId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoiceAIApi - functional programming interface
 * @export
 */
export const VoiceAIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoiceAIApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an outbound call.  Args:     request: The call request with phone number and context     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
         * @summary Create Outbound Call
         * @param {CallRequest} callRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOutboundCallApiVoiceAiCallsPost(callRequest: CallRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOutboundCallApiVoiceAiCallsPost(callRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoiceAIApi.createOutboundCallApiVoiceAiCallsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
         * @summary Get Call Status
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallStatusApiVoiceAiCallsCallIdGet(callId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallStatusApiVoiceAiCallsCallIdGet(callId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoiceAIApi.getCallStatusApiVoiceAiCallsCallIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VoiceAIApi - factory interface
 * @export
 */
export const VoiceAIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoiceAIApiFp(configuration)
    return {
        /**
         * Create an outbound call.  Args:     request: The call request with phone number and context     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
         * @summary Create Outbound Call
         * @param {CallRequest} callRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundCallApiVoiceAiCallsPost(callRequest: CallRequest, options?: RawAxiosRequestConfig): AxiosPromise<CallResponse> {
            return localVarFp.createOutboundCallApiVoiceAiCallsPost(callRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
         * @summary Get Call Status
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallStatusApiVoiceAiCallsCallIdGet(callId: string, options?: RawAxiosRequestConfig): AxiosPromise<CallResponse> {
            return localVarFp.getCallStatusApiVoiceAiCallsCallIdGet(callId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VoiceAIApi - object-oriented interface
 * @export
 * @class VoiceAIApi
 * @extends {BaseAPI}
 */
export class VoiceAIApi extends BaseAPI {
    /**
     * Create an outbound call.  Args:     request: The call request with phone number and context     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
     * @summary Create Outbound Call
     * @param {CallRequest} callRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceAIApi
     */
    public createOutboundCallApiVoiceAiCallsPost(callRequest: CallRequest, options?: RawAxiosRequestConfig) {
        return VoiceAIApiFp(this.configuration).createOutboundCallApiVoiceAiCallsPost(callRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
     * @summary Get Call Status
     * @param {string} callId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceAIApi
     */
    public getCallStatusApiVoiceAiCallsCallIdGet(callId: string, options?: RawAxiosRequestConfig) {
        return VoiceAIApiFp(this.configuration).getCallStatusApiVoiceAiCallsCallIdGet(callId, options).then((request) => request(this.axios, this.basePath));
    }
}



