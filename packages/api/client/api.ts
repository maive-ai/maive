/* tslint:disable */
/* eslint-disable */
/**
 * Maive API
 * API for Maive application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Response model for the user\'s currently active call.
 * @export
 * @interface ActiveCallResponse
 */
export interface ActiveCallResponse {
    /**
     * User identifier
     * @type {string}
     * @memberof ActiveCallResponse
     */
    'user_id': string;
    /**
     * Unique call identifier
     * @type {string}
     * @memberof ActiveCallResponse
     */
    'call_id': string;
    /**
     * Associated project identifier
     * @type {string}
     * @memberof ActiveCallResponse
     */
    'project_id': string;
    /**
     * Current call status
     * @type {CallStatus}
     * @memberof ActiveCallResponse
     */
    'status': CallStatus;
    /**
     * Voice AI provider
     * @type {VoiceAIProvider}
     * @memberof ActiveCallResponse
     */
    'provider': VoiceAIProvider;
    /**
     * Phone number being called
     * @type {string}
     * @memberof ActiveCallResponse
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof ActiveCallResponse
     */
    'listen_url'?: string | null;
    /**
     * Call start timestamp (ISO format)
     * @type {string}
     * @memberof ActiveCallResponse
     */
    'started_at': string;
    /**
     * 
     * @type {any}
     * @memberof ActiveCallResponse
     */
    'provider_data'?: any;
    /**
     * Transcript messages from the call
     * @type {Array<TranscriptMessage>}
     * @memberof ActiveCallResponse
     */
    'transcript'?: Array<TranscriptMessage>;
}


/**
 * Request model for adding projects to call list.
 * @export
 * @interface AddToCallListRequest
 */
export interface AddToCallListRequest {
    /**
     * List of project/job IDs to add to call list
     * @type {Array<string>}
     * @memberof AddToCallListRequest
     */
    'project_ids': Array<string>;
}
/**
 * Provider-agnostic analysis data from completed calls.
 * @export
 * @interface AnalysisData
 */
export interface AnalysisData {
    /**
     * 
     * @type {string}
     * @memberof AnalysisData
     */
    'summary'?: string | null;
    /**
     * 
     * @type {ClaimStatusData}
     * @memberof AnalysisData
     */
    'structured_data'?: ClaimStatusData | null;
    /**
     * 
     * @type {string}
     * @memberof AnalysisData
     */
    'success_evaluation'?: string | null;
}
/**
 * Schema for authentication responses.
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * Whether the operation was successful
     * @type {boolean}
     * @memberof AuthResponse
     */
    'success': boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuthResponse
     */
    'session'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'error'?: string | null;
    /**
     * Whether MFA is required
     * @type {boolean}
     * @memberof AuthResponse
     */
    'requires_mfa'?: boolean;
    /**
     * Whether MFA setup is required
     * @type {boolean}
     * @memberof AuthResponse
     */
    'mfa_setup_required'?: boolean;
}
/**
 * 
 * @export
 * @interface BodyAddContactNoteApiCrmContactsContactIdNotesPost
 */
export interface BodyAddContactNoteApiCrmContactsContactIdNotesPost {
    /**
     * The note text content
     * @type {string}
     * @memberof BodyAddContactNoteApiCrmContactsContactIdNotesPost
     */
    'text': string;
    /**
     * Whether to pin the note to the top
     * @type {boolean}
     * @memberof BodyAddContactNoteApiCrmContactsContactIdNotesPost
     */
    'pin_to_top'?: boolean;
}
/**
 * 
 * @export
 * @interface BodyAddJobNoteApiCrmJobsJobIdNotesPost
 */
export interface BodyAddJobNoteApiCrmJobsJobIdNotesPost {
    /**
     * The note text content
     * @type {string}
     * @memberof BodyAddJobNoteApiCrmJobsJobIdNotesPost
     */
    'text': string;
    /**
     * Whether to pin the note to the top
     * @type {boolean}
     * @memberof BodyAddJobNoteApiCrmJobsJobIdNotesPost
     */
    'pin_to_top'?: boolean;
}
/**
 * 
 * @export
 * @interface BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch
 */
export interface BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch {
    /**
     * The new status value
     * @type {string}
     * @memberof BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch
     */
    'status_value': string;
}
/**
 * 
 * @export
 * @interface BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch
 */
export interface BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch {
    /**
     * The new status value
     * @type {string}
     * @memberof BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch
     */
    'status_value': string;
}
/**
 * Available CRM providers.
 * @export
 * @enum {string}
 */

export const CRMProvider = {
    ServiceTitan: 'service_titan',
    JobNimbus: 'job_nimbus',
    Mock: 'mock'
} as const;

export type CRMProvider = typeof CRMProvider[keyof typeof CRMProvider];


/**
 * Response model for a single call list item.
 * @export
 * @interface CallListItemResponse
 */
export interface CallListItemResponse {
    /**
     * Database ID of the call list item
     * @type {number}
     * @memberof CallListItemResponse
     */
    'id': number;
    /**
     * Cognito user ID
     * @type {string}
     * @memberof CallListItemResponse
     */
    'user_id': string;
    /**
     * Project/Job ID from CRM
     * @type {string}
     * @memberof CallListItemResponse
     */
    'project_id': string;
    /**
     * Whether the call has been completed
     * @type {boolean}
     * @memberof CallListItemResponse
     */
    'call_completed': boolean;
    /**
     * Position in the call list for ordering
     * @type {number}
     * @memberof CallListItemResponse
     */
    'position': number;
    /**
     * When the item was added to the list
     * @type {string}
     * @memberof CallListItemResponse
     */
    'created_at': string;
    /**
     * When the item was last updated
     * @type {string}
     * @memberof CallListItemResponse
     */
    'updated_at': string;
}
/**
 * Response model for the complete call list.
 * @export
 * @interface CallListResponse
 */
export interface CallListResponse {
    /**
     * List of call list items
     * @type {Array<CallListItemResponse>}
     * @memberof CallListResponse
     */
    'items': Array<CallListItemResponse>;
    /**
     * Total number of items in the call list
     * @type {number}
     * @memberof CallListResponse
     */
    'total': number;
}
/**
 * Request model for creating an outbound call.
 * @export
 * @interface CallRequest
 */
export interface CallRequest {
    /**
     * Phone number to call
     * @type {string}
     * @memberof CallRequest
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'customer_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'customer_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'customer_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'claim_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'date_of_loss'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'insurance_agency'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'adjuster_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'adjuster_phone'?: string | null;
    /**
     * Additional metadata
     * @type {{ [key: string]: any; }}
     * @memberof CallRequest
     */
    'metadata'?: { [key: string]: any; };
    /**
     * 
     * @type {JobId}
     * @memberof CallRequest
     */
    'job_id'?: JobId | null;
    /**
     * 
     * @type {number}
     * @memberof CallRequest
     */
    'tenant'?: number | null;
}
/**
 * Response model for call information.
 * @export
 * @interface CallResponse
 */
export interface CallResponse {
    /**
     * Unique call identifier
     * @type {string}
     * @memberof CallResponse
     */
    'call_id': string;
    /**
     * Current call status
     * @type {CallStatus}
     * @memberof CallResponse
     */
    'status': CallStatus;
    /**
     * Voice AI provider
     * @type {VoiceAIProvider}
     * @memberof CallResponse
     */
    'provider': VoiceAIProvider;
    /**
     * 
     * @type {string}
     * @memberof CallResponse
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof CallResponse
     */
    'provider_data'?: any;
    /**
     * 
     * @type {AnalysisData}
     * @memberof CallResponse
     */
    'analysis'?: AnalysisData | null;
    /**
     * Transcript messages from the call
     * @type {Array<TranscriptMessage>}
     * @memberof CallResponse
     */
    'messages'?: Array<TranscriptMessage>;
}


/**
 * Call status values across Voice AI systems.
 * @export
 * @enum {string}
 */

export const CallStatus = {
    Queued: 'queued',
    Ringing: 'ringing',
    InProgress: 'in_progress',
    Forwarding: 'forwarding',
    Ended: 'ended',
    Busy: 'busy',
    NoAnswer: 'no_answer',
    Failed: 'failed',
    Canceled: 'canceled',
    EndedFailedCanceledBusyNoAnswer: '[\'ended\', \'failed\', \'canceled\', \'busy\', \'no_answer\']'
} as const;

export type CallStatus = typeof CallStatus[keyof typeof CallStatus];


/**
 * Chat message model.
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    'content': string;
}
/**
 * Chat request with message history.
 * @export
 * @interface ChatRequest
 */
export interface ChatRequest {
    /**
     * 
     * @type {Array<ChatMessage>}
     * @memberof ChatRequest
     */
    'messages': Array<ChatMessage>;
}
/**
 * Provider-agnostic structured data from insurance claim status calls.  Note: claim_status now represents the project/job status in the CRM. Different CRM providers have different status values.
 * @export
 * @interface ClaimStatusData
 */
export interface ClaimStatusData {
    /**
     * Call outcome: success, voicemail, gatekeeper, failed
     * @type {string}
     * @memberof ClaimStatusData
     */
    'call_outcome'?: string;
    /**
     * Project/job status from call: e.g. \'Completed\', \'Hold\', \'Pending Review\', etc.
     * @type {string}
     * @memberof ClaimStatusData
     */
    'claim_status'?: string;
    /**
     * 
     * @type {PaymentDetails}
     * @memberof ClaimStatusData
     */
    'payment_details'?: PaymentDetails | null;
    /**
     * 
     * @type {RequiredActions}
     * @memberof ClaimStatusData
     */
    'required_actions'?: RequiredActions | null;
    /**
     * 
     * @type {string}
     * @memberof ClaimStatusData
     */
    'claim_update_summary'?: string | null;
}
/**
 * Universal contact/customer model that works across all CRM providers.
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * Unique contact identifier (provider-specific format)
     * @type {string}
     * @memberof Contact
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'mobile_phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'work_phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'address_line1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'address_line2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'postal_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'workflow_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'updated_at'?: string | null;
    /**
     * CRM provider name
     * @type {CRMProvider}
     * @memberof Contact
     */
    'provider': CRMProvider;
    /**
     * Provider-specific data
     * @type {{ [key: string]: any; }}
     * @memberof Contact
     */
    'provider_data'?: { [key: string]: any; };
}


/**
 * Universal contact list response with pagination.
 * @export
 * @interface ContactList
 */
export interface ContactList {
    /**
     * List of contacts
     * @type {Array<Contact>}
     * @memberof ContactList
     */
    'contacts': Array<Contact>;
    /**
     * Total number of contacts
     * @type {number}
     * @memberof ContactList
     */
    'total_count': number;
    /**
     * CRM provider name
     * @type {CRMProvider}
     * @memberof ContactList
     */
    'provider': CRMProvider;
    /**
     * 
     * @type {number}
     * @memberof ContactList
     */
    'page'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ContactList
     */
    'page_size'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ContactList
     */
    'has_more'?: boolean | null;
}


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Universal job model that works across all CRM providers.
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * Unique job identifier (provider-specific format)
     * @type {string}
     * @memberof Job
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'number'?: string | null;
    /**
     * Current job status (provider-specific)
     * @type {string}
     * @memberof Job
     */
    'status': string;
    /**
     * 
     * @type {StatusId}
     * @memberof Job
     */
    'status_id'?: StatusId | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'workflow_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'customer_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'customer_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'address_line1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'address_line2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'postal_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'sales_rep_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'sales_rep_name'?: string | null;
    /**
     * CRM provider name
     * @type {CRMProvider}
     * @memberof Job
     */
    'provider': CRMProvider;
    /**
     * Provider-specific data
     * @type {{ [key: string]: any; }}
     * @memberof Job
     */
    'provider_data'?: { [key: string]: any; };
}


/**
 * Job/Project ID (int for Service Titan, str for JobNimbus/Mock)
 * @export
 * @interface JobId
 */
export interface JobId {
}
/**
 * Universal job list response with pagination.
 * @export
 * @interface JobList
 */
export interface JobList {
    /**
     * List of jobs
     * @type {Array<Job>}
     * @memberof JobList
     */
    'jobs': Array<Job>;
    /**
     * Total number of jobs
     * @type {number}
     * @memberof JobList
     */
    'total_count': number;
    /**
     * CRM provider name
     * @type {CRMProvider}
     * @memberof JobList
     */
    'provider': CRMProvider;
    /**
     * 
     * @type {number}
     * @memberof JobList
     */
    'page'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof JobList
     */
    'page_size'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof JobList
     */
    'has_more'?: boolean | null;
}


/**
 * Request model for marking a call as completed.
 * @export
 * @interface MarkCallCompletedRequest
 */
export interface MarkCallCompletedRequest {
    /**
     * Whether the call is completed
     * @type {boolean}
     * @memberof MarkCallCompletedRequest
     */
    'completed'?: boolean;
}
/**
 * Universal note/activity model that works across all CRM providers.
 * @export
 * @interface Note
 */
export interface Note {
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'id'?: string | null;
    /**
     * Note text content
     * @type {string}
     * @memberof Note
     */
    'text': string;
    /**
     * ID of the entity this note belongs to
     * @type {string}
     * @memberof Note
     */
    'entity_id': string;
    /**
     * Type of entity (job, contact, project, etc.)
     * @type {string}
     * @memberof Note
     */
    'entity_type': string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'created_by_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'created_by_name'?: string | null;
    /**
     * Creation timestamp (ISO format)
     * @type {string}
     * @memberof Note
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    'updated_at'?: string | null;
    /**
     * Whether the note is pinned
     * @type {boolean}
     * @memberof Note
     */
    'is_pinned'?: boolean;
    /**
     * CRM provider name
     * @type {CRMProvider}
     * @memberof Note
     */
    'provider': CRMProvider;
    /**
     * Provider-specific data
     * @type {{ [key: string]: any; }}
     * @memberof Note
     */
    'provider_data'?: { [key: string]: any; };
}


/**
 * Provider-agnostic payment information from claim status calls.
 * @export
 * @interface PaymentDetails
 */
export interface PaymentDetails {
    /**
     * 
     * @type {string}
     * @memberof PaymentDetails
     */
    'status'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentDetails
     */
    'amount'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetails
     */
    'issue_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetails
     */
    'check_number'?: string | null;
}
/**
 * Universal project model that works across all CRM providers.  In hierarchical CRMs (Service Titan), projects are top-level containers that may contain multiple jobs. In flat CRMs (JobNimbus), projects and jobs are the same entity.
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * Unique project identifier (provider-specific format)
     * @type {string}
     * @memberof Project
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'number'?: string | null;
    /**
     * Current project status (provider-specific)
     * @type {string}
     * @memberof Project
     */
    'status': string;
    /**
     * 
     * @type {StatusId}
     * @memberof Project
     */
    'status_id'?: StatusId | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'sub_status'?: string | null;
    /**
     * 
     * @type {SubStatusId}
     * @memberof Project
     */
    'sub_status_id'?: SubStatusId | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'workflow_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'customer_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'customer_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'location_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'address_line1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'address_line2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'postal_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'start_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'target_completion_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'actual_completion_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'claim_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'date_of_loss'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'insurance_company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'adjuster_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'adjuster_phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'adjuster_email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'sales_rep_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'sales_rep_name'?: string | null;
    /**
     * CRM provider name
     * @type {CRMProvider}
     * @memberof Project
     */
    'provider': CRMProvider;
    /**
     * Provider-specific data
     * @type {{ [key: string]: any; }}
     * @memberof Project
     */
    'provider_data'?: { [key: string]: any; };
}


/**
 * Universal project list response with pagination.
 * @export
 * @interface ProjectList
 */
export interface ProjectList {
    /**
     * List of projects
     * @type {Array<Project>}
     * @memberof ProjectList
     */
    'projects': Array<Project>;
    /**
     * Total number of projects
     * @type {number}
     * @memberof ProjectList
     */
    'total_count': number;
    /**
     * CRM provider name
     * @type {CRMProvider}
     * @memberof ProjectList
     */
    'provider': CRMProvider;
    /**
     * 
     * @type {number}
     * @memberof ProjectList
     */
    'page'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProjectList
     */
    'page_size'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectList
     */
    'has_more'?: boolean | null;
}


/**
 * Provider-agnostic required actions from claim status calls.
 * @export
 * @interface RequiredActions
 */
export interface RequiredActions {
    /**
     * List of required documents
     * @type {Array<string>}
     * @memberof RequiredActions
     */
    'documents_needed'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequiredActions
     */
    'submission_method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RequiredActions
     */
    'next_steps'?: string | null;
}
/**
 * User roles in the system.
 * @export
 * @enum {string}
 */

export const Role = {
    Admin: 'admin',
    Manager: 'manager',
    User: 'user'
} as const;

export type Role = typeof Role[keyof typeof Role];


/**
 * Status identifier
 * @export
 * @interface StatusId
 */
export interface StatusId {
}
/**
 * Sub-status identifier
 * @export
 * @interface SubStatusId
 */
export interface SubStatusId {
}
/**
 * Provider-agnostic transcript message.
 * @export
 * @interface TranscriptMessage
 */
export interface TranscriptMessage {
    /**
     * Speaker role: user, assistant, system
     * @type {string}
     * @memberof TranscriptMessage
     */
    'role': string;
    /**
     * Message content
     * @type {string}
     * @memberof TranscriptMessage
     */
    'content': string;
    /**
     * Seconds from call start
     * @type {number}
     * @memberof TranscriptMessage
     */
    'timestamp_seconds': number;
    /**
     * 
     * @type {number}
     * @memberof TranscriptMessage
     */
    'duration_seconds'?: number | null;
}
/**
 * User information.
 * @export
 * @interface User
 */
export interface User {
    /**
     * User\'s unique identifier
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * User\'s email address
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof User
     */
    'role'?: Role | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'organization_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'profile_picture'?: string | null;
    /**
     * Whether user\'s email is verified
     * @type {boolean}
     * @memberof User
     */
    'email_verified'?: boolean;
    /**
     * Whether MFA is enabled for the user
     * @type {boolean}
     * @memberof User
     */
    'mfa_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string | null;
}


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * Available Voice AI providers.
 * @export
 * @enum {string}
 */

export const VoiceAIProvider = {
    Vapi: 'vapi'
} as const;

export type VoiceAIProvider = typeof VoiceAIProvider[keyof typeof VoiceAIProvider];



/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiAuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallbackApiAuthCallbackGet: async (code?: string | null, error?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiAuthRefreshPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutApiAuthSignoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/signout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserInfoApiAuthMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getCurrentUserInfoApiAuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallbackApiAuthCallbackGet(code, error, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.oauthCallbackApiAuthCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshTokenApiAuthRefreshPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.refreshTokenApiAuthRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signOutApiAuthSignoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.signOutApiAuthSignoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getCurrentUserInfoApiAuthMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.oauthCallbackApiAuthCallbackGet(code, error, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.refreshTokenApiAuthRefreshPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.signOutApiAuthSignoutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Get current user information.  Returns the profile information of the currently authenticated user.
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getCurrentUserInfoApiAuthMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
     * @summary Oauth Callback
     * @param {string | null} [code] 
     * @param {string | null} [error] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).oauthCallbackApiAuthCallbackGet(code, error, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refreshTokenApiAuthRefreshPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
     * @summary Sign Out
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signOutApiAuthSignoutPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CRMApi - axios parameter creator
 * @export
 */
export const CRMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a note to a contact.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     contact_id: The unique identifier for the contact     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
         * @summary Add Contact Note
         * @param {string} contactId 
         * @param {BodyAddContactNoteApiCrmContactsContactIdNotesPost} bodyAddContactNoteApiCrmContactsContactIdNotesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactNoteApiCrmContactsContactIdNotesPost: async (contactId: string, bodyAddContactNoteApiCrmContactsContactIdNotesPost: BodyAddContactNoteApiCrmContactsContactIdNotesPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('addContactNoteApiCrmContactsContactIdNotesPost', 'contactId', contactId)
            // verify required parameter 'bodyAddContactNoteApiCrmContactsContactIdNotesPost' is not null or undefined
            assertParamExists('addContactNoteApiCrmContactsContactIdNotesPost', 'bodyAddContactNoteApiCrmContactsContactIdNotesPost', bodyAddContactNoteApiCrmContactsContactIdNotesPost)
            const localVarPath = `/api/crm/contacts/{contact_id}/notes`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAddContactNoteApiCrmContactsContactIdNotesPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a note to a job.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Add Job Note
         * @param {string} jobId 
         * @param {BodyAddJobNoteApiCrmJobsJobIdNotesPost} bodyAddJobNoteApiCrmJobsJobIdNotesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobNoteApiCrmJobsJobIdNotesPost: async (jobId: string, bodyAddJobNoteApiCrmJobsJobIdNotesPost: BodyAddJobNoteApiCrmJobsJobIdNotesPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('addJobNoteApiCrmJobsJobIdNotesPost', 'jobId', jobId)
            // verify required parameter 'bodyAddJobNoteApiCrmJobsJobIdNotesPost' is not null or undefined
            assertParamExists('addJobNoteApiCrmJobsJobIdNotesPost', 'bodyAddJobNoteApiCrmJobsJobIdNotesPost', bodyAddJobNoteApiCrmJobsJobIdNotesPost)
            const localVarPath = `/api/crm/jobs/{job_id}/notes`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAddJobNoteApiCrmJobsJobIdNotesPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all contacts with pagination.  This endpoint works across all CRM providers and returns a standardized ContactList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ContactList: Paginated list of contacts in universal format  Raises:     HTTPException: If an error occurs while fetching contacts
         * @summary Get All Contacts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContactsApiCrmContactsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all jobs with pagination.  This endpoint works across all CRM providers and returns a standardized JobList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     JobList: Paginated list of jobs in universal format  Raises:     HTTPException: If an error occurs while fetching jobs
         * @summary Get All Jobs
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsApiCrmJobsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all projects with pagination.  This endpoint works across all CRM providers and returns a standardized ProjectList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ProjectList: Paginated list of projects in universal format  Raises:     HTTPException: If an error occurs while fetching projects
         * @summary Get All Projects
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsApiCrmProjectsGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific contact by ID.  This endpoint works across all CRM providers and returns a standardized Contact schema.  Args:     contact_id: The unique identifier for the contact (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Contact: The contact information in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
         * @summary Get Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactApiCrmContactsContactIdGet: async (contactId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getContactApiCrmContactsContactIdGet', 'contactId', contactId)
            const localVarPath = `/api/crm/contacts/{contact_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific job by ID.  This endpoint works across all CRM providers and returns a standardized Job schema.  Args:     job_id: The unique identifier for the job (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Job: The job information in universal format  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Get Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobApiCrmJobsJobIdGet: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJobApiCrmJobsJobIdGet', 'jobId', jobId)
            const localVarPath = `/api/crm/jobs/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific project by ID.  This endpoint works across all CRM providers and returns a standardized Project schema.  Note: In flat CRMs like JobNimbus, projects and jobs are the same entity.  Args:     project_id: The unique identifier for the project (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Project: The project information in universal format  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectApiCrmProjectsProjectIdGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectApiCrmProjectsProjectIdGet', 'projectId', projectId)
            const localVarPath = `/api/crm/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a job.  This endpoint works across all CRM providers.  Args:     job_id: The unique identifier for the job     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Update Job Status
         * @param {string} jobId 
         * @param {BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch} bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobStatusApiCrmJobsJobIdStatusPatch: async (jobId: string, bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch: BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('updateJobStatusApiCrmJobsJobIdStatusPatch', 'jobId', jobId)
            // verify required parameter 'bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch' is not null or undefined
            assertParamExists('updateJobStatusApiCrmJobsJobIdStatusPatch', 'bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch', bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch)
            const localVarPath = `/api/crm/jobs/{job_id}/status`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a project.  This endpoint works across all CRM providers.  Args:     project_id: The unique identifier for the project     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Update Project Status
         * @param {string} projectId 
         * @param {BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch} bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectStatusApiCrmProjectsProjectIdStatusPatch: async (projectId: string, bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch: BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProjectStatusApiCrmProjectsProjectIdStatusPatch', 'projectId', projectId)
            // verify required parameter 'bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch' is not null or undefined
            assertParamExists('updateProjectStatusApiCrmProjectsProjectIdStatusPatch', 'bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch', bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch)
            const localVarPath = `/api/crm/projects/{project_id}/status`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CRMApi - functional programming interface
 * @export
 */
export const CRMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CRMApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a note to a contact.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     contact_id: The unique identifier for the contact     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
         * @summary Add Contact Note
         * @param {string} contactId 
         * @param {BodyAddContactNoteApiCrmContactsContactIdNotesPost} bodyAddContactNoteApiCrmContactsContactIdNotesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactNoteApiCrmContactsContactIdNotesPost(contactId: string, bodyAddContactNoteApiCrmContactsContactIdNotesPost: BodyAddContactNoteApiCrmContactsContactIdNotesPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Note>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addContactNoteApiCrmContactsContactIdNotesPost(contactId, bodyAddContactNoteApiCrmContactsContactIdNotesPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.addContactNoteApiCrmContactsContactIdNotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a note to a job.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Add Job Note
         * @param {string} jobId 
         * @param {BodyAddJobNoteApiCrmJobsJobIdNotesPost} bodyAddJobNoteApiCrmJobsJobIdNotesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addJobNoteApiCrmJobsJobIdNotesPost(jobId: string, bodyAddJobNoteApiCrmJobsJobIdNotesPost: BodyAddJobNoteApiCrmJobsJobIdNotesPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Note>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addJobNoteApiCrmJobsJobIdNotesPost(jobId, bodyAddJobNoteApiCrmJobsJobIdNotesPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.addJobNoteApiCrmJobsJobIdNotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all contacts with pagination.  This endpoint works across all CRM providers and returns a standardized ContactList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ContactList: Paginated list of contacts in universal format  Raises:     HTTPException: If an error occurs while fetching contacts
         * @summary Get All Contacts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContactsApiCrmContactsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllContactsApiCrmContactsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getAllContactsApiCrmContactsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all jobs with pagination.  This endpoint works across all CRM providers and returns a standardized JobList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     JobList: Paginated list of jobs in universal format  Raises:     HTTPException: If an error occurs while fetching jobs
         * @summary Get All Jobs
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllJobsApiCrmJobsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllJobsApiCrmJobsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getAllJobsApiCrmJobsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all projects with pagination.  This endpoint works across all CRM providers and returns a standardized ProjectList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ProjectList: Paginated list of projects in universal format  Raises:     HTTPException: If an error occurs while fetching projects
         * @summary Get All Projects
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectsApiCrmProjectsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectsApiCrmProjectsGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getAllProjectsApiCrmProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific contact by ID.  This endpoint works across all CRM providers and returns a standardized Contact schema.  Args:     contact_id: The unique identifier for the contact (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Contact: The contact information in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
         * @summary Get Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactApiCrmContactsContactIdGet(contactId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactApiCrmContactsContactIdGet(contactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getContactApiCrmContactsContactIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific job by ID.  This endpoint works across all CRM providers and returns a standardized Job schema.  Args:     job_id: The unique identifier for the job (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Job: The job information in universal format  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Get Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobApiCrmJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobApiCrmJobsJobIdGet(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getJobApiCrmJobsJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific project by ID.  This endpoint works across all CRM providers and returns a standardized Project schema.  Note: In flat CRMs like JobNimbus, projects and jobs are the same entity.  Args:     project_id: The unique identifier for the project (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Project: The project information in universal format  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectApiCrmProjectsProjectIdGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectApiCrmProjectsProjectIdGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getProjectApiCrmProjectsProjectIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the status of a job.  This endpoint works across all CRM providers.  Args:     job_id: The unique identifier for the job     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Update Job Status
         * @param {string} jobId 
         * @param {BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch} bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJobStatusApiCrmJobsJobIdStatusPatch(jobId: string, bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch: BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJobStatusApiCrmJobsJobIdStatusPatch(jobId, bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.updateJobStatusApiCrmJobsJobIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the status of a project.  This endpoint works across all CRM providers.  Args:     project_id: The unique identifier for the project     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Update Project Status
         * @param {string} projectId 
         * @param {BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch} bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectStatusApiCrmProjectsProjectIdStatusPatch(projectId: string, bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch: BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectStatusApiCrmProjectsProjectIdStatusPatch(projectId, bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.updateProjectStatusApiCrmProjectsProjectIdStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CRMApi - factory interface
 * @export
 */
export const CRMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CRMApiFp(configuration)
    return {
        /**
         * Add a note to a contact.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     contact_id: The unique identifier for the contact     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
         * @summary Add Contact Note
         * @param {string} contactId 
         * @param {BodyAddContactNoteApiCrmContactsContactIdNotesPost} bodyAddContactNoteApiCrmContactsContactIdNotesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactNoteApiCrmContactsContactIdNotesPost(contactId: string, bodyAddContactNoteApiCrmContactsContactIdNotesPost: BodyAddContactNoteApiCrmContactsContactIdNotesPost, options?: RawAxiosRequestConfig): AxiosPromise<Note> {
            return localVarFp.addContactNoteApiCrmContactsContactIdNotesPost(contactId, bodyAddContactNoteApiCrmContactsContactIdNotesPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a note to a job.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Add Job Note
         * @param {string} jobId 
         * @param {BodyAddJobNoteApiCrmJobsJobIdNotesPost} bodyAddJobNoteApiCrmJobsJobIdNotesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobNoteApiCrmJobsJobIdNotesPost(jobId: string, bodyAddJobNoteApiCrmJobsJobIdNotesPost: BodyAddJobNoteApiCrmJobsJobIdNotesPost, options?: RawAxiosRequestConfig): AxiosPromise<Note> {
            return localVarFp.addJobNoteApiCrmJobsJobIdNotesPost(jobId, bodyAddJobNoteApiCrmJobsJobIdNotesPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all contacts with pagination.  This endpoint works across all CRM providers and returns a standardized ContactList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ContactList: Paginated list of contacts in universal format  Raises:     HTTPException: If an error occurs while fetching contacts
         * @summary Get All Contacts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContactsApiCrmContactsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<ContactList> {
            return localVarFp.getAllContactsApiCrmContactsGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all jobs with pagination.  This endpoint works across all CRM providers and returns a standardized JobList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     JobList: Paginated list of jobs in universal format  Raises:     HTTPException: If an error occurs while fetching jobs
         * @summary Get All Jobs
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobsApiCrmJobsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<JobList> {
            return localVarFp.getAllJobsApiCrmJobsGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all projects with pagination.  This endpoint works across all CRM providers and returns a standardized ProjectList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ProjectList: Paginated list of projects in universal format  Raises:     HTTPException: If an error occurs while fetching projects
         * @summary Get All Projects
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsApiCrmProjectsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<ProjectList> {
            return localVarFp.getAllProjectsApiCrmProjectsGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific contact by ID.  This endpoint works across all CRM providers and returns a standardized Contact schema.  Args:     contact_id: The unique identifier for the contact (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Contact: The contact information in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
         * @summary Get Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactApiCrmContactsContactIdGet(contactId: string, options?: RawAxiosRequestConfig): AxiosPromise<Contact> {
            return localVarFp.getContactApiCrmContactsContactIdGet(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific job by ID.  This endpoint works across all CRM providers and returns a standardized Job schema.  Args:     job_id: The unique identifier for the job (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Job: The job information in universal format  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Get Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobApiCrmJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.getJobApiCrmJobsJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific project by ID.  This endpoint works across all CRM providers and returns a standardized Project schema.  Note: In flat CRMs like JobNimbus, projects and jobs are the same entity.  Args:     project_id: The unique identifier for the project (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Project: The project information in universal format  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectApiCrmProjectsProjectIdGet(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.getProjectApiCrmProjectsProjectIdGet(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a job.  This endpoint works across all CRM providers.  Args:     job_id: The unique identifier for the job     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the job is not found or an error occurs
         * @summary Update Job Status
         * @param {string} jobId 
         * @param {BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch} bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobStatusApiCrmJobsJobIdStatusPatch(jobId: string, bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch: BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateJobStatusApiCrmJobsJobIdStatusPatch(jobId, bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a project.  This endpoint works across all CRM providers.  Args:     project_id: The unique identifier for the project     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Update Project Status
         * @param {string} projectId 
         * @param {BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch} bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectStatusApiCrmProjectsProjectIdStatusPatch(projectId: string, bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch: BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateProjectStatusApiCrmProjectsProjectIdStatusPatch(projectId, bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CRMApi - object-oriented interface
 * @export
 * @class CRMApi
 * @extends {BaseAPI}
 */
export class CRMApi extends BaseAPI {
    /**
     * Add a note to a contact.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     contact_id: The unique identifier for the contact     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
     * @summary Add Contact Note
     * @param {string} contactId 
     * @param {BodyAddContactNoteApiCrmContactsContactIdNotesPost} bodyAddContactNoteApiCrmContactsContactIdNotesPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public addContactNoteApiCrmContactsContactIdNotesPost(contactId: string, bodyAddContactNoteApiCrmContactsContactIdNotesPost: BodyAddContactNoteApiCrmContactsContactIdNotesPost, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).addContactNoteApiCrmContactsContactIdNotesPost(contactId, bodyAddContactNoteApiCrmContactsContactIdNotesPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a note to a job.  This endpoint works across all CRM providers and returns a standardized Note schema.  Args:     job_id: The unique identifier for the job     text: The text content of the note     pin_to_top: Whether to pin the note to the top (provider-specific, may not be supported)     crm_service: The CRM service instance from dependency injection  Returns:     Note: The created note in universal format  Raises:     HTTPException: If the job is not found or an error occurs
     * @summary Add Job Note
     * @param {string} jobId 
     * @param {BodyAddJobNoteApiCrmJobsJobIdNotesPost} bodyAddJobNoteApiCrmJobsJobIdNotesPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public addJobNoteApiCrmJobsJobIdNotesPost(jobId: string, bodyAddJobNoteApiCrmJobsJobIdNotesPost: BodyAddJobNoteApiCrmJobsJobIdNotesPost, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).addJobNoteApiCrmJobsJobIdNotesPost(jobId, bodyAddJobNoteApiCrmJobsJobIdNotesPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all contacts with pagination.  This endpoint works across all CRM providers and returns a standardized ContactList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ContactList: Paginated list of contacts in universal format  Raises:     HTTPException: If an error occurs while fetching contacts
     * @summary Get All Contacts
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [pageSize] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getAllContactsApiCrmContactsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getAllContactsApiCrmContactsGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all jobs with pagination.  This endpoint works across all CRM providers and returns a standardized JobList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     JobList: Paginated list of jobs in universal format  Raises:     HTTPException: If an error occurs while fetching jobs
     * @summary Get All Jobs
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [pageSize] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getAllJobsApiCrmJobsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getAllJobsApiCrmJobsGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all projects with pagination.  This endpoint works across all CRM providers and returns a standardized ProjectList schema.  Args:     page: Page number (1-indexed)     page_size: Number of items per page (max 100)     crm_service: The CRM service instance from dependency injection  Returns:     ProjectList: Paginated list of projects in universal format  Raises:     HTTPException: If an error occurs while fetching projects
     * @summary Get All Projects
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [pageSize] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getAllProjectsApiCrmProjectsGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getAllProjectsApiCrmProjectsGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific contact by ID.  This endpoint works across all CRM providers and returns a standardized Contact schema.  Args:     contact_id: The unique identifier for the contact (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Contact: The contact information in universal format  Raises:     HTTPException: If the contact is not found or an error occurs
     * @summary Get Contact
     * @param {string} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getContactApiCrmContactsContactIdGet(contactId: string, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getContactApiCrmContactsContactIdGet(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific job by ID.  This endpoint works across all CRM providers and returns a standardized Job schema.  Args:     job_id: The unique identifier for the job (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Job: The job information in universal format  Raises:     HTTPException: If the job is not found or an error occurs
     * @summary Get Job
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getJobApiCrmJobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getJobApiCrmJobsJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific project by ID.  This endpoint works across all CRM providers and returns a standardized Project schema.  Note: In flat CRMs like JobNimbus, projects and jobs are the same entity.  Args:     project_id: The unique identifier for the project (provider-specific format)     crm_service: The CRM service instance from dependency injection  Returns:     Project: The project information in universal format  Raises:     HTTPException: If the project is not found or an error occurs
     * @summary Get Project
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getProjectApiCrmProjectsProjectIdGet(projectId: string, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getProjectApiCrmProjectsProjectIdGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of a job.  This endpoint works across all CRM providers.  Args:     job_id: The unique identifier for the job     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the job is not found or an error occurs
     * @summary Update Job Status
     * @param {string} jobId 
     * @param {BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch} bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public updateJobStatusApiCrmJobsJobIdStatusPatch(jobId: string, bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch: BodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).updateJobStatusApiCrmJobsJobIdStatusPatch(jobId, bodyUpdateJobStatusApiCrmJobsJobIdStatusPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of a project.  This endpoint works across all CRM providers.  Args:     project_id: The unique identifier for the project     status_value: The new status value (provider-specific format)     crm_service: The CRM service instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
     * @summary Update Project Status
     * @param {string} projectId 
     * @param {BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch} bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public updateProjectStatusApiCrmProjectsProjectIdStatusPatch(projectId: string, bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch: BodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).updateProjectStatusApiCrmProjectsProjectIdStatusPatch(projectId, bodyUpdateProjectStatusApiCrmProjectsProjectIdStatusPatch, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CallListApi - axios parameter creator
 * @export
 */
export const CallListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add projects to the user\'s call list.  Adds multiple projects to the authenticated user\'s call list. Duplicate projects are silently ignored.  Args:     request: Request containing list of project IDs to add     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The updated call list  Raises:     HTTPException: If an error occurs adding projects
         * @summary Add To Call List
         * @param {AddToCallListRequest} addToCallListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCallListApiCallListAddPost: async (addToCallListRequest: AddToCallListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addToCallListRequest' is not null or undefined
            assertParamExists('addToCallListApiCallListAddPost', 'addToCallListRequest', addToCallListRequest)
            const localVarPath = `/api/call-list/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addToCallListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear all items from the user\'s call list.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If an error occurs clearing the call list
         * @summary Clear Call List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCallListApiCallListDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/call-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the user\'s call list.  Returns all items in the authenticated user\'s call list, ordered by position.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The user\'s call list  Raises:     HTTPException: If an error occurs retrieving the call list
         * @summary Get Call List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallListApiCallListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/call-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a call as completed or not completed.  Args:     project_id: The project ID to update     request: Request containing completion status     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListItemResponse: The updated call list item  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Mark Call Completed
         * @param {string} projectId 
         * @param {MarkCallCompletedRequest} markCallCompletedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCallCompletedApiCallListProjectIdCompletedPatch: async (projectId: string, markCallCompletedRequest: MarkCallCompletedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('markCallCompletedApiCallListProjectIdCompletedPatch', 'projectId', projectId)
            // verify required parameter 'markCallCompletedRequest' is not null or undefined
            assertParamExists('markCallCompletedApiCallListProjectIdCompletedPatch', 'markCallCompletedRequest', markCallCompletedRequest)
            const localVarPath = `/api/call-list/{project_id}/completed`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markCallCompletedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a project from the user\'s call list.  Args:     project_id: The project ID to remove     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Remove From Call List
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCallListApiCallListProjectIdDelete: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeFromCallListApiCallListProjectIdDelete', 'projectId', projectId)
            const localVarPath = `/api/call-list/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallListApi - functional programming interface
 * @export
 */
export const CallListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallListApiAxiosParamCreator(configuration)
    return {
        /**
         * Add projects to the user\'s call list.  Adds multiple projects to the authenticated user\'s call list. Duplicate projects are silently ignored.  Args:     request: Request containing list of project IDs to add     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The updated call list  Raises:     HTTPException: If an error occurs adding projects
         * @summary Add To Call List
         * @param {AddToCallListRequest} addToCallListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCallListApiCallListAddPost(addToCallListRequest: AddToCallListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCallListApiCallListAddPost(addToCallListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallListApi.addToCallListApiCallListAddPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Clear all items from the user\'s call list.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If an error occurs clearing the call list
         * @summary Clear Call List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearCallListApiCallListDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearCallListApiCallListDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallListApi.clearCallListApiCallListDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the user\'s call list.  Returns all items in the authenticated user\'s call list, ordered by position.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The user\'s call list  Raises:     HTTPException: If an error occurs retrieving the call list
         * @summary Get Call List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallListApiCallListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallListApiCallListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallListApi.getCallListApiCallListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mark a call as completed or not completed.  Args:     project_id: The project ID to update     request: Request containing completion status     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListItemResponse: The updated call list item  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Mark Call Completed
         * @param {string} projectId 
         * @param {MarkCallCompletedRequest} markCallCompletedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markCallCompletedApiCallListProjectIdCompletedPatch(projectId: string, markCallCompletedRequest: MarkCallCompletedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallListItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markCallCompletedApiCallListProjectIdCompletedPatch(projectId, markCallCompletedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallListApi.markCallCompletedApiCallListProjectIdCompletedPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a project from the user\'s call list.  Args:     project_id: The project ID to remove     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Remove From Call List
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromCallListApiCallListProjectIdDelete(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromCallListApiCallListProjectIdDelete(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallListApi.removeFromCallListApiCallListProjectIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CallListApi - factory interface
 * @export
 */
export const CallListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallListApiFp(configuration)
    return {
        /**
         * Add projects to the user\'s call list.  Adds multiple projects to the authenticated user\'s call list. Duplicate projects are silently ignored.  Args:     request: Request containing list of project IDs to add     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The updated call list  Raises:     HTTPException: If an error occurs adding projects
         * @summary Add To Call List
         * @param {AddToCallListRequest} addToCallListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCallListApiCallListAddPost(addToCallListRequest: AddToCallListRequest, options?: RawAxiosRequestConfig): AxiosPromise<CallListResponse> {
            return localVarFp.addToCallListApiCallListAddPost(addToCallListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear all items from the user\'s call list.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If an error occurs clearing the call list
         * @summary Clear Call List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCallListApiCallListDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clearCallListApiCallListDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the user\'s call list.  Returns all items in the authenticated user\'s call list, ordered by position.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The user\'s call list  Raises:     HTTPException: If an error occurs retrieving the call list
         * @summary Get Call List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallListApiCallListGet(options?: RawAxiosRequestConfig): AxiosPromise<CallListResponse> {
            return localVarFp.getCallListApiCallListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Mark a call as completed or not completed.  Args:     project_id: The project ID to update     request: Request containing completion status     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListItemResponse: The updated call list item  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Mark Call Completed
         * @param {string} projectId 
         * @param {MarkCallCompletedRequest} markCallCompletedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCallCompletedApiCallListProjectIdCompletedPatch(projectId: string, markCallCompletedRequest: MarkCallCompletedRequest, options?: RawAxiosRequestConfig): AxiosPromise<CallListItemResponse> {
            return localVarFp.markCallCompletedApiCallListProjectIdCompletedPatch(projectId, markCallCompletedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a project from the user\'s call list.  Args:     project_id: The project ID to remove     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Remove From Call List
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCallListApiCallListProjectIdDelete(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromCallListApiCallListProjectIdDelete(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallListApi - object-oriented interface
 * @export
 * @class CallListApi
 * @extends {BaseAPI}
 */
export class CallListApi extends BaseAPI {
    /**
     * Add projects to the user\'s call list.  Adds multiple projects to the authenticated user\'s call list. Duplicate projects are silently ignored.  Args:     request: Request containing list of project IDs to add     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The updated call list  Raises:     HTTPException: If an error occurs adding projects
     * @summary Add To Call List
     * @param {AddToCallListRequest} addToCallListRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallListApi
     */
    public addToCallListApiCallListAddPost(addToCallListRequest: AddToCallListRequest, options?: RawAxiosRequestConfig) {
        return CallListApiFp(this.configuration).addToCallListApiCallListAddPost(addToCallListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear all items from the user\'s call list.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If an error occurs clearing the call list
     * @summary Clear Call List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallListApi
     */
    public clearCallListApiCallListDelete(options?: RawAxiosRequestConfig) {
        return CallListApiFp(this.configuration).clearCallListApiCallListDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the user\'s call list.  Returns all items in the authenticated user\'s call list, ordered by position.  Args:     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListResponse: The user\'s call list  Raises:     HTTPException: If an error occurs retrieving the call list
     * @summary Get Call List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallListApi
     */
    public getCallListApiCallListGet(options?: RawAxiosRequestConfig) {
        return CallListApiFp(this.configuration).getCallListApiCallListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark a call as completed or not completed.  Args:     project_id: The project ID to update     request: Request containing completion status     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Returns:     CallListItemResponse: The updated call list item  Raises:     HTTPException: If the project is not found or an error occurs
     * @summary Mark Call Completed
     * @param {string} projectId 
     * @param {MarkCallCompletedRequest} markCallCompletedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallListApi
     */
    public markCallCompletedApiCallListProjectIdCompletedPatch(projectId: string, markCallCompletedRequest: MarkCallCompletedRequest, options?: RawAxiosRequestConfig) {
        return CallListApiFp(this.configuration).markCallCompletedApiCallListProjectIdCompletedPatch(projectId, markCallCompletedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a project from the user\'s call list.  Args:     project_id: The project ID to remove     current_user: The authenticated user     call_list_repository: The call list repository instance from dependency injection  Raises:     HTTPException: If the project is not found or an error occurs
     * @summary Remove From Call List
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallListApi
     */
    public removeFromCallListApiCallListProjectIdDelete(projectId: string, options?: RawAxiosRequestConfig) {
        return CallListApiFp(this.configuration).removeFromCallListApiCallListProjectIdDelete(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Stream roofing chat responses via Server-Sent Events.  Args:     request: Chat request with message history     current_user: Authenticated user (from JWT)     chat_service: Chat service dependency  Returns:     StreamingResponse: SSE stream of chat responses
         * @summary Stream Roofing Chat
         * @param {ChatRequest} chatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamRoofingChatApiChatRoofingPost: async (chatRequest: ChatRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRequest' is not null or undefined
            assertParamExists('streamRoofingChatApiChatRoofingPost', 'chatRequest', chatRequest)
            const localVarPath = `/api/chat/roofing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Stream roofing chat responses via Server-Sent Events.  Args:     request: Chat request with message history     current_user: Authenticated user (from JWT)     chat_service: Chat service dependency  Returns:     StreamingResponse: SSE stream of chat responses
         * @summary Stream Roofing Chat
         * @param {ChatRequest} chatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamRoofingChatApiChatRoofingPost(chatRequest: ChatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamRoofingChatApiChatRoofingPost(chatRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.streamRoofingChatApiChatRoofingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Stream roofing chat responses via Server-Sent Events.  Args:     request: Chat request with message history     current_user: Authenticated user (from JWT)     chat_service: Chat service dependency  Returns:     StreamingResponse: SSE stream of chat responses
         * @summary Stream Roofing Chat
         * @param {ChatRequest} chatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamRoofingChatApiChatRoofingPost(chatRequest: ChatRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.streamRoofingChatApiChatRoofingPost(chatRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * Stream roofing chat responses via Server-Sent Events.  Args:     request: Chat request with message history     current_user: Authenticated user (from JWT)     chat_service: Chat service dependency  Returns:     StreamingResponse: SSE stream of chat responses
     * @summary Stream Roofing Chat
     * @param {ChatRequest} chatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public streamRoofingChatApiChatRoofingPost(chatRequest: ChatRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).streamRoofingChatApiChatRoofingPost(chatRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckHealthcheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheckHealthcheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheckHealthcheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthcheckHealthcheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckHealthcheckGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthcheckHealthcheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Health check endpoint.
     * @summary Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthcheckHealthcheckGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthcheckHealthcheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Root endpoint.
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VoiceAIApi - axios parameter creator
 * @export
 */
export const VoiceAIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * End an ongoing call programmatically.  Args:     call_id: The unique identifier for the call to end     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection     call_repository: The call repository instance from dependency injection  Raises:     HTTPException: If the call is not found or cannot be ended
         * @summary End Call
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endCallApiVoiceAiCallsCallIdDelete: async (callId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callId' is not null or undefined
            assertParamExists('endCallApiVoiceAiCallsCallIdDelete', 'callId', callId)
            const localVarPath = `/api/voice-ai/calls/{call_id}`
                .replace(`{${"call_id"}}`, encodeURIComponent(String(callId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the user\'s currently active call.  Returns the active call data if one exists, otherwise returns None.  Args:     current_user: The authenticated user     call_repository: The call repository instance from dependency injection  Returns:     ActiveCallResponse | None: The active call data or None if no active call  Raises:     HTTPException: If an error occurs retrieving the call
         * @summary Get Active Call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveCallApiVoiceAiCallsActiveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/voice-ai/calls/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
         * @summary Get Call Status
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallStatusApiVoiceAiCallsCallIdGet: async (callId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callId' is not null or undefined
            assertParamExists('getCallStatusApiVoiceAiCallsCallIdGet', 'callId', callId)
            const localVarPath = `/api/voice-ai/calls/{call_id}`
                .replace(`{${"call_id"}}`, encodeURIComponent(String(callId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoiceAIApi - functional programming interface
 * @export
 */
export const VoiceAIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoiceAIApiAxiosParamCreator(configuration)
    return {
        /**
         * End an ongoing call programmatically.  Args:     call_id: The unique identifier for the call to end     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection     call_repository: The call repository instance from dependency injection  Raises:     HTTPException: If the call is not found or cannot be ended
         * @summary End Call
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endCallApiVoiceAiCallsCallIdDelete(callId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endCallApiVoiceAiCallsCallIdDelete(callId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoiceAIApi.endCallApiVoiceAiCallsCallIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the user\'s currently active call.  Returns the active call data if one exists, otherwise returns None.  Args:     current_user: The authenticated user     call_repository: The call repository instance from dependency injection  Returns:     ActiveCallResponse | None: The active call data or None if no active call  Raises:     HTTPException: If an error occurs retrieving the call
         * @summary Get Active Call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveCallApiVoiceAiCallsActiveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActiveCallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveCallApiVoiceAiCallsActiveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoiceAIApi.getActiveCallApiVoiceAiCallsActiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
         * @summary Get Call Status
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCallStatusApiVoiceAiCallsCallIdGet(callId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCallStatusApiVoiceAiCallsCallIdGet(callId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoiceAIApi.getCallStatusApiVoiceAiCallsCallIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VoiceAIApi - factory interface
 * @export
 */
export const VoiceAIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoiceAIApiFp(configuration)
    return {
        /**
         * End an ongoing call programmatically.  Args:     call_id: The unique identifier for the call to end     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection     call_repository: The call repository instance from dependency injection  Raises:     HTTPException: If the call is not found or cannot be ended
         * @summary End Call
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endCallApiVoiceAiCallsCallIdDelete(callId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.endCallApiVoiceAiCallsCallIdDelete(callId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the user\'s currently active call.  Returns the active call data if one exists, otherwise returns None.  Args:     current_user: The authenticated user     call_repository: The call repository instance from dependency injection  Returns:     ActiveCallResponse | None: The active call data or None if no active call  Raises:     HTTPException: If an error occurs retrieving the call
         * @summary Get Active Call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveCallApiVoiceAiCallsActiveGet(options?: RawAxiosRequestConfig): AxiosPromise<ActiveCallResponse> {
            return localVarFp.getActiveCallApiVoiceAiCallsActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
         * @summary Get Call Status
         * @param {string} callId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCallStatusApiVoiceAiCallsCallIdGet(callId: string, options?: RawAxiosRequestConfig): AxiosPromise<CallResponse> {
            return localVarFp.getCallStatusApiVoiceAiCallsCallIdGet(callId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VoiceAIApi - object-oriented interface
 * @export
 * @class VoiceAIApi
 * @extends {BaseAPI}
 */
export class VoiceAIApi extends BaseAPI {
    /**
     * End an ongoing call programmatically.  Args:     call_id: The unique identifier for the call to end     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection     call_repository: The call repository instance from dependency injection  Raises:     HTTPException: If the call is not found or cannot be ended
     * @summary End Call
     * @param {string} callId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceAIApi
     */
    public endCallApiVoiceAiCallsCallIdDelete(callId: string, options?: RawAxiosRequestConfig) {
        return VoiceAIApiFp(this.configuration).endCallApiVoiceAiCallsCallIdDelete(callId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the user\'s currently active call.  Returns the active call data if one exists, otherwise returns None.  Args:     current_user: The authenticated user     call_repository: The call repository instance from dependency injection  Returns:     ActiveCallResponse | None: The active call data or None if no active call  Raises:     HTTPException: If an error occurs retrieving the call
     * @summary Get Active Call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceAIApi
     */
    public getActiveCallApiVoiceAiCallsActiveGet(options?: RawAxiosRequestConfig) {
        return VoiceAIApiFp(this.configuration).getActiveCallApiVoiceAiCallsActiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of a specific call by ID.  Args:     call_id: The unique identifier for the call     current_user: The authenticated user     voice_ai_service: The Voice AI service instance from dependency injection  Returns:     CallResponse: The call status information  Raises:     HTTPException: If the call is not found or an error occurs
     * @summary Get Call Status
     * @param {string} callId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceAIApi
     */
    public getCallStatusApiVoiceAiCallsCallIdGet(callId: string, options?: RawAxiosRequestConfig) {
        return VoiceAIApiFp(this.configuration).getCallStatusApiVoiceAiCallsCallIdGet(callId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export const WorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an outbound call with monitoring and write results to CRM.  This workflow endpoint orchestrates: 1. Creating the call via Voice AI provider 2. Starting background call monitoring and writing results to CRM 3. Updating CRM with call results when complete  Args:     request: The call request with phone number and context     current_user: The authenticated user     workflow: The call monitoring and CRM writing workflow from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
         * @summary Call And Write Results To Crm
         * @param {CallRequest} callRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost: async (callRequest: CallRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callRequest' is not null or undefined
            assertParamExists('callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost', 'callRequest', callRequest)
            const localVarPath = `/api/workflows/call-and-write-results-to-crm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export const WorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an outbound call with monitoring and write results to CRM.  This workflow endpoint orchestrates: 1. Creating the call via Voice AI provider 2. Starting background call monitoring and writing results to CRM 3. Updating CRM with call results when complete  Args:     request: The call request with phone number and context     current_user: The authenticated user     workflow: The call monitoring and CRM writing workflow from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
         * @summary Call And Write Results To Crm
         * @param {CallRequest} callRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost(callRequest: CallRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost(callRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkflowsApi - factory interface
 * @export
 */
export const WorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowsApiFp(configuration)
    return {
        /**
         * Create an outbound call with monitoring and write results to CRM.  This workflow endpoint orchestrates: 1. Creating the call via Voice AI provider 2. Starting background call monitoring and writing results to CRM 3. Updating CRM with call results when complete  Args:     request: The call request with phone number and context     current_user: The authenticated user     workflow: The call monitoring and CRM writing workflow from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
         * @summary Call And Write Results To Crm
         * @param {CallRequest} callRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost(callRequest: CallRequest, options?: RawAxiosRequestConfig): AxiosPromise<CallResponse> {
            return localVarFp.callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost(callRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsApi
 * @extends {BaseAPI}
 */
export class WorkflowsApi extends BaseAPI {
    /**
     * Create an outbound call with monitoring and write results to CRM.  This workflow endpoint orchestrates: 1. Creating the call via Voice AI provider 2. Starting background call monitoring and writing results to CRM 3. Updating CRM with call results when complete  Args:     request: The call request with phone number and context     current_user: The authenticated user     workflow: The call monitoring and CRM writing workflow from dependency injection  Returns:     CallResponse: The call information  Raises:     HTTPException: If call creation fails
     * @summary Call And Write Results To Crm
     * @param {CallRequest} callRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost(callRequest: CallRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).callAndWriteResultsToCrmApiWorkflowsCallAndWriteResultsToCrmPost(callRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



