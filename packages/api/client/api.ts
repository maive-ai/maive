/* tslint:disable */
/* eslint-disable */
/**
 * Maive API
 * API for Maive application
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Schema for authentication responses.
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * Whether the operation was successful
     * @type {boolean}
     * @memberof AuthResponse
     */
    'success': boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuthResponse
     */
    'session'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'error'?: string | null;
    /**
     * Whether MFA is required
     * @type {boolean}
     * @memberof AuthResponse
     */
    'requires_mfa'?: boolean;
    /**
     * Whether MFA setup is required
     * @type {boolean}
     * @memberof AuthResponse
     */
    'mfa_setup_required'?: boolean;
}
/**
 * Available CRM providers.
 * @export
 * @enum {string}
 */

export const CRMProvider = {
    ServiceTitan: 'service_titan'
} as const;

export type CRMProvider = typeof CRMProvider[keyof typeof CRMProvider];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Project status values across CRM systems.
 * @export
 * @enum {string}
 */

export const ProjectStatus = {
    OnHold: 'on_hold',
    Active: 'active',
    Completed: 'completed',
    Cancelled: 'cancelled',
    Scheduled: 'scheduled',
    InProgress: 'in_progress',
    Pending: 'pending'
} as const;

export type ProjectStatus = typeof ProjectStatus[keyof typeof ProjectStatus];


/**
 * Response model for multiple project statuses.
 * @export
 * @interface ProjectStatusListResponse
 */
export interface ProjectStatusListResponse {
    /**
     * List of project statuses
     * @type {Array<ProjectStatusResponse>}
     * @memberof ProjectStatusListResponse
     */
    'projects': Array<ProjectStatusResponse>;
    /**
     * Total number of projects
     * @type {number}
     * @memberof ProjectStatusListResponse
     */
    'total_count': number;
    /**
     * CRM provider
     * @type {CRMProvider}
     * @memberof ProjectStatusListResponse
     */
    'provider': CRMProvider;
}


/**
 * Response model for project status information.
 * @export
 * @interface ProjectStatusResponse
 */
export interface ProjectStatusResponse {
    /**
     * Unique project identifier
     * @type {string}
     * @memberof ProjectStatusResponse
     */
    'project_id': string;
    /**
     * Current project status
     * @type {ProjectStatus}
     * @memberof ProjectStatusResponse
     */
    'status': ProjectStatus;
    /**
     * CRM provider
     * @type {CRMProvider}
     * @memberof ProjectStatusResponse
     */
    'provider': CRMProvider;
    /**
     * 
     * @type {string}
     * @memberof ProjectStatusResponse
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ProjectStatusResponse
     */
    'provider_data'?: { [key: string]: any; } | null;
}


/**
 * User roles in the system.
 * @export
 * @enum {string}
 */

export const Role = {
    Admin: 'admin',
    Manager: 'manager',
    User: 'user'
} as const;

export type Role = typeof Role[keyof typeof Role];


/**
 * User information.
 * @export
 * @interface User
 */
export interface User {
    /**
     * User\'s unique identifier
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * User\'s email address
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof User
     */
    'role'?: Role | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'organization_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'profile_picture'?: string | null;
    /**
     * Whether user\'s email is verified
     * @type {boolean}
     * @memberof User
     */
    'email_verified'?: boolean;
    /**
     * Whether MFA is enabled for the user
     * @type {boolean}
     * @memberof User
     */
    'mfa_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string | null;
}


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiAuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallbackApiAuthCallbackGet: async (code?: string | null, error?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiAuthRefreshPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutApiAuthSignoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/signout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserInfoApiAuthMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getCurrentUserInfoApiAuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallbackApiAuthCallbackGet(code, error, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.oauthCallbackApiAuthCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshTokenApiAuthRefreshPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.refreshTokenApiAuthRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signOutApiAuthSignoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.signOutApiAuthSignoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Get current user information.  Returns the profile information of the currently authenticated user.
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getCurrentUserInfoApiAuthMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
         * @summary Oauth Callback
         * @param {string | null} [code] 
         * @param {string | null} [error] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.oauthCallbackApiAuthCallbackGet(code, error, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.refreshTokenApiAuthRefreshPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
         * @summary Sign Out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.signOutApiAuthSignoutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Get current user information.  Returns the profile information of the currently authenticated user.
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getCurrentUserInfoApiAuthMeGet(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getCurrentUserInfoApiAuthMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OAuth2 callback endpoint for Cognito authentication.  Exchanges authorization code for tokens and redirects to frontend.
     * @summary Oauth Callback
     * @param {string | null} [code] 
     * @param {string | null} [error] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public oauthCallbackApiAuthCallbackGet(code?: string | null, error?: string | null, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).oauthCallbackApiAuthCallbackGet(code, error, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh access token using refresh token.  Uses the refresh token from cookies to get a new access token.
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshTokenApiAuthRefreshPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refreshTokenApiAuthRefreshPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign out the current user.  Invalidates the current user\'s session and clears cookies.
     * @summary Sign Out
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signOutApiAuthSignoutPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signOutApiAuthSignoutPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CRMApi - axios parameter creator
 * @export
 */
export const CRMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
         * @summary Get All Project Statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectStatusesApiCrmProjectsStatusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/crm/projects/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project Status
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectStatusApiCrmProjectsProjectIdStatusGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectStatusApiCrmProjectsProjectIdStatusGet', 'projectId', projectId)
            const localVarPath = `/api/crm/projects/{project_id}/status`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CRMApi - functional programming interface
 * @export
 */
export const CRMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CRMApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
         * @summary Get All Project Statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectStatusesApiCrmProjectsStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectStatusListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectStatusesApiCrmProjectsStatusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getAllProjectStatusesApiCrmProjectsStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project Status
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CRMApi.getProjectStatusApiCrmProjectsProjectIdStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CRMApi - factory interface
 * @export
 */
export const CRMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CRMApiFp(configuration)
    return {
        /**
         * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
         * @summary Get All Project Statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectStatusesApiCrmProjectsStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<ProjectStatusListResponse> {
            return localVarFp.getAllProjectStatusesApiCrmProjectsStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
         * @summary Get Project Status
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectStatusResponse> {
            return localVarFp.getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CRMApi - object-oriented interface
 * @export
 * @class CRMApi
 * @extends {BaseAPI}
 */
export class CRMApi extends BaseAPI {
    /**
     * Get the status of all projects.  Args:     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusListResponse: List of all project statuses  Raises:     HTTPException: If an error occurs while fetching project statuses
     * @summary Get All Project Statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getAllProjectStatusesApiCrmProjectsStatusGet(options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getAllProjectStatusesApiCrmProjectsStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of a specific project by ID.  Args:     project_id: The unique identifier for the project     crm_service: The CRM service instance from dependency injection  Returns:     ProjectStatusResponse: The project status information  Raises:     HTTPException: If the project is not found or an error occurs
     * @summary Get Project Status
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CRMApi
     */
    public getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId: string, options?: RawAxiosRequestConfig) {
        return CRMApiFp(this.configuration).getProjectStatusApiCrmProjectsProjectIdStatusGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckHealthcheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheckHealthcheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheckHealthcheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthcheckHealthcheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Health check endpoint.
         * @summary Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheckHealthcheckGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthcheckHealthcheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Root endpoint.
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Health check endpoint.
     * @summary Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthcheckHealthcheckGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthcheckHealthcheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Root endpoint.
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



