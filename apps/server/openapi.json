{
  "openapi": "3.1.0",
  "info": {
    "title": "Maive API",
    "description": "API for Maive application",
    "version": "0.1.0"
  },
  "paths": {
    "/api/auth/signout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Sign Out",
        "description": "Sign out the current user.\n\nInvalidates the current user's session and clears cookies.",
        "operationId": "sign_out_api_auth_signout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get Current User Info",
        "description": "Get current user information.\n\nReturns the profile information of the currently authenticated user.",
        "operationId": "get_current_user_info_api_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/auth/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Oauth Callback",
        "description": "OAuth2 callback endpoint for Cognito authentication.\n\nExchanges authorization code for tokens and redirects to frontend.",
        "operationId": "oauth_callback_api_auth_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Code"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh Token",
        "description": "Refresh access token using refresh token.\n\nUses the refresh token from cookies to get a new access token.",
        "operationId": "refresh_token_api_auth_refresh_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "summary": "Healthcheck",
        "description": "Health check endpoint.",
        "operationId": "healthcheck_healthcheck_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the operation was successful"
          },
          "session": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session",
            "description": "User session data"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if operation failed"
          },
          "requires_mfa": {
            "type": "boolean",
            "title": "Requires Mfa",
            "description": "Whether MFA is required",
            "default": false
          },
          "mfa_setup_required": {
            "type": "boolean",
            "title": "Mfa Setup Required",
            "description": "Whether MFA setup is required",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "AuthResponse",
        "description": "Schema for authentication responses."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Role": {
        "type": "string",
        "enum": [
          "admin",
          "manager",
          "user"
        ],
        "title": "Role",
        "description": "User roles in the system."
      },
      "User": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User's unique identifier"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User's email address"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 128,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "User's full name"
          },
          "role": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Role"
              },
              {
                "type": "null"
              }
            ],
            "description": "User's role"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "User's organization ID"
          },
          "profile_picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture",
            "description": "User's profile picture URL"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified",
            "description": "Whether user's email is verified",
            "default": false
          },
          "mfa_enabled": {
            "type": "boolean",
            "title": "Mfa Enabled",
            "description": "Whether MFA is enabled for the user",
            "default": false
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "User creation timestamp"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "User last update timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email"
        ],
        "title": "User",
        "description": "User information."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}