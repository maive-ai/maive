import { useCreateProject, type ProjectData } from '@/clients/crm';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { env } from '@/env';
import { createFileRoute, useNavigate } from '@tanstack/react-router';
import { AlertCircle, Building2, FileText, Loader2, User } from 'lucide-react';
import { useState } from 'react';

export const Route = createFileRoute('/_authed/create-project')({
  component: CreateProject,
});

const DEFAULT_PHONE = '+1-703-268-1917';
const DEFAULT_ADDRESS = '123 Main St, Austin, TX 78701';

const STATUS_OPTIONS = [
  { value: 'Scheduled', label: 'Scheduled' },
  { value: 'Dispatched', label: 'Dispatched' },
  { value: 'InProgress', label: 'In Progress' },
  { value: 'Hold', label: 'Hold' },
  { value: 'Completed', label: 'Completed' },
  { value: 'Canceled', label: 'Canceled' },
] as const;

function CreateProject() {
  const navigate = useNavigate();
  const createProjectMutation = useCreateProject();

  // Form state
  const [customerName, setCustomerName] = useState('');
  const [address, setAddress] = useState(DEFAULT_ADDRESS);
  const [phone, setPhone] = useState(DEFAULT_PHONE);
  const [email, setEmail] = useState('');
  const [claimNumber, setClaimNumber] = useState('');
  const [dateOfLoss, setDateOfLoss] = useState('');
  const [insuranceAgency, setInsuranceAgency] = useState('');
  const [insuranceContactName, setInsuranceContactName] = useState('');
  const [insuranceContactPhone, setInsuranceContactPhone] = useState(DEFAULT_PHONE);
  const [insuranceContactEmail, setInsuranceContactEmail] = useState('');
  const [adjusterName, setAdjusterName] = useState('');
  const [adjusterContactName, setAdjusterContactName] = useState('');
  const [adjusterContactPhone, setAdjusterContactPhone] = useState(DEFAULT_PHONE);
  const [adjusterContactEmail, setAdjusterContactEmail] = useState('');
  const [notes, setNotes] = useState('');
  const [status, setStatus] = useState('InProgress');

  // Feature flag check
  if (!env.PUBLIC_ENABLE_DEMO_PROJECT_CREATION) {
    return (
      <div className="flex h-full items-center justify-center">
        <div className="text-center">
          <AlertCircle className="size-8 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">
            Feature Not Available
          </h2>
          <p className="text-gray-600">
            Demo project creation is not enabled in this environment.
          </p>
        </div>
      </div>
    );  
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const projectData: ProjectData = {
      id: '', // Will be generated by backend
      customerName,
      address,
      phone,
      email: email || undefined,
      claimNumber: claimNumber || undefined,
      dateOfLoss: dateOfLoss || undefined,
      insuranceAgency: insuranceAgency || undefined,
      insuranceAgencyContact:
        insuranceContactName || insuranceContactPhone || insuranceContactEmail
          ? {
              name: insuranceContactName,
              phone: insuranceContactPhone,
              email: insuranceContactEmail,
            }
          : undefined,
      adjusterName: adjusterName || undefined,
      adjusterContact:
        adjusterContactName || adjusterContactPhone || adjusterContactEmail
          ? {
              name: adjusterContactName,
              phone: adjusterContactPhone,
              email: adjusterContactEmail,
            }
          : undefined,
      notes: notes || undefined,
    };

    createProjectMutation.mutate(projectData, {
      onSuccess: () => {
        navigate({ to: '/projects' });
      },
    });
  };

  const isFormValid = customerName.trim();

  return (
    <div className="flex h-full bg-white p-6">
      <div className="w-full max-w-4xl mx-auto">
        <Card>
          <CardHeader>
            <div className="flex items-center gap-3">
              <div className="size-10 rounded-lg bg-gradient-to-br from-orange-400 to-pink-400 flex items-center justify-center">
                <Building2 className="size-6 text-white" />
              </div>
              <div>
                <CardTitle className="text-2xl">Create Demo Project</CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  Add a new project to your CRM (Mock mode only)
                </p>
              </div>
            </div>
          </CardHeader>

          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-8">
              {/* Customer Information */}
              <div className="space-y-4">
                <div className="flex items-center gap-2 mb-4">
                  <Building2 className="size-5 text-gray-500" />
                  <h3 className="text-lg font-semibold text-gray-900">Customer Information</h3>
                </div>

                <div className="space-y-4 pl-7">
                  <div className="space-y-2">
                    <Label htmlFor="customerName">
                      Customer Name <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="customerName"
                      value={customerName}
                      onChange={(e) => setCustomerName(e.target.value)}
                      placeholder="John Smith"
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="address">Address</Label>
                    <Input
                      id="address"
                      value={address}
                      onChange={(e) => setAddress(e.target.value)}
                      placeholder="123 Main St, Austin, TX 78701"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      type="tel"
                      value={phone}
                      onChange={(e) => setPhone(e.target.value)}
                      placeholder="+1-555-0123"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="customer@gmail.com"
                    />
                  </div>
                </div>
              </div>

              {/* Claim Information */}
              <div className="border-t pt-6 space-y-4">
                <div className="flex items-center gap-2 mb-4">
                  <FileText className="size-5 text-gray-500" />
                  <h3 className="text-lg font-semibold text-gray-900">Claim Information</h3>
                </div>

                <div className="space-y-4 pl-7">
                  <div className="space-y-2">
                    <Label htmlFor="claimNumber">Claim Number</Label>
                    <Input
                      id="claimNumber"
                      value={claimNumber}
                      onChange={(e) => setClaimNumber(e.target.value)}
                      placeholder="CLM-2024-001"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="dateOfLoss">Date of Loss</Label>
                    <Input
                      id="dateOfLoss"
                      type="date"
                      value={dateOfLoss}
                      onChange={(e) => setDateOfLoss(e.target.value)}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="insuranceAgency">Insurance Agency</Label>
                    <Input
                      id="insuranceAgency"
                      value={insuranceAgency}
                      onChange={(e) => setInsuranceAgency(e.target.value)}
                      placeholder="State Farm Insurance"
                    />
                  </div>
                </div>
              </div>

              {/* Insurance Contact */}
              <div className="border-t pt-6 space-y-4">
                <div className="flex items-center gap-2 mb-4">
                  <User className="size-5 text-gray-500" />
                  <h3 className="text-lg font-semibold text-gray-900">Insurance Contact</h3>
                </div>

                <div className="space-y-4 pl-7">
                  <div className="space-y-2">
                    <Label htmlFor="insuranceContactName">Contact Name</Label>
                    <Input
                      id="insuranceContactName"
                      value={insuranceContactName}
                      onChange={(e) => setInsuranceContactName(e.target.value)}
                      placeholder="Sarah Johnson"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="insuranceContactPhone">Contact Phone</Label>
                    <Input
                      id="insuranceContactPhone"
                      type="tel"
                      value={insuranceContactPhone}
                      onChange={(e) => setInsuranceContactPhone(e.target.value)}
                      placeholder="+1-555-0123"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="insuranceContactEmail">Contact Email</Label>
                    <Input
                      id="insuranceContactEmail"
                      type="email"
                      value={insuranceContactEmail}
                      onChange={(e) => setInsuranceContactEmail(e.target.value)}
                      placeholder="contact@insurance.com"
                    />
                  </div>
                </div>
              </div>

              {/* Adjuster Information */}
              <div className="border-t pt-6 space-y-4">
                <div className="flex items-center gap-2 mb-4">
                  <User className="size-5 text-gray-500" />
                  <h3 className="text-lg font-semibold text-gray-900">Adjuster Information</h3>
                </div>

                <div className="space-y-4 pl-7">
                  <div className="space-y-2">
                    <Label htmlFor="adjusterName">Adjuster Name</Label>
                    <Input
                      id="adjusterName"
                      value={adjusterName}
                      onChange={(e) => setAdjusterName(e.target.value)}
                      placeholder="Mike Williams"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="adjusterContactName">Contact Name</Label>
                    <Input
                      id="adjusterContactName"
                      value={adjusterContactName}
                      onChange={(e) => setAdjusterContactName(e.target.value)}
                      placeholder="Mike Williams"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="adjusterContactPhone">Contact Phone</Label>
                    <Input
                      id="adjusterContactPhone"
                      type="tel"
                      value={adjusterContactPhone}
                      onChange={(e) => setAdjusterContactPhone(e.target.value)}
                      placeholder="+1-555-0123"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="adjusterContactEmail">Contact Email</Label>
                    <Input
                      id="adjusterContactEmail"
                      type="email"
                      value={adjusterContactEmail}
                      onChange={(e) => setAdjusterContactEmail(e.target.value)}
                      placeholder="adjuster@insurance.com"
                    />
                  </div>
                </div>
              </div>

              {/* Project Details */}
              <div className="border-t pt-6 space-y-4">
                <div className="flex items-center gap-2 mb-4">
                  <FileText className="size-5 text-gray-500" />
                  <h3 className="text-lg font-semibold text-gray-900">Project Details</h3>
                </div>

                <div className="space-y-4 pl-7">
                  <div className="space-y-2">
                    <Label htmlFor="status">Status</Label>
                    <Select value={status} onValueChange={setStatus}>
                      <SelectTrigger id="status">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {STATUS_OPTIONS.map((option) => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="notes">Notes</Label>
                    <Textarea
                      id="notes"
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      placeholder="Add any additional notes about the project..."
                      rows={4}
                    />
                  </div>
                </div>
              </div>

              {/* Success/Error Messages */}
              {createProjectMutation.isError && (
                <div className="flex items-start gap-3 rounded-lg bg-red-50 border border-red-200 p-4">
                  <AlertCircle className="size-5 text-red-600 mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium text-red-900">Failed to create project</p>
                    <p className="text-sm text-red-700">
                      {createProjectMutation.error?.message || 'An unexpected error occurred'}
                    </p>
                  </div>
                </div>
              )}

              {/* Submit Button */}
              <div className="flex gap-3 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate({ to: '/projects' })}
                  disabled={createProjectMutation.isPending}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={!isFormValid || createProjectMutation.isPending}
                  className="flex-1"
                >
                  {createProjectMutation.isPending ? (
                    <>
                      <Loader2 className="size-4 animate-spin" />
                      Creating Project...
                    </>
                  ) : (
                    'Create Project'
                  )}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

